From badda27f61706a4ceed2098b2057c3ec0206617d Mon Sep 17 00:00:00 2001
From: Harald Hoyer <harald@redhat.com>
Date: Wed, 11 Jul 2012 15:15:41 +0200
Subject: [PATCH] test/TEST-04-FULL-SYSTEMD: full test with systemd and /usr
 mount

---
 test/TEST-04-FULL-SYSTEMD/99-idesymlinks.rules |    8 +
 test/TEST-04-FULL-SYSTEMD/Makefile             |   10 +
 test/TEST-04-FULL-SYSTEMD/create-root.sh       |   39 ++++
 test/TEST-04-FULL-SYSTEMD/cryptroot-ask.sh     |    6 +
 test/TEST-04-FULL-SYSTEMD/fstab                |    2 +
 test/TEST-04-FULL-SYSTEMD/hard-off.sh          |    3 +
 test/TEST-04-FULL-SYSTEMD/test-init.sh         |   29 +++
 test/TEST-04-FULL-SYSTEMD/test.sh              |  273 ++++++++++++++++++++++++
 8 files changed, 370 insertions(+)
 create mode 100644 test/TEST-04-FULL-SYSTEMD/99-idesymlinks.rules
 create mode 100644 test/TEST-04-FULL-SYSTEMD/Makefile
 create mode 100755 test/TEST-04-FULL-SYSTEMD/create-root.sh
 create mode 100755 test/TEST-04-FULL-SYSTEMD/cryptroot-ask.sh
 create mode 100644 test/TEST-04-FULL-SYSTEMD/fstab
 create mode 100755 test/TEST-04-FULL-SYSTEMD/hard-off.sh
 create mode 100755 test/TEST-04-FULL-SYSTEMD/test-init.sh
 create mode 100755 test/TEST-04-FULL-SYSTEMD/test.sh

diff --git a/test/TEST-04-FULL-SYSTEMD/99-idesymlinks.rules b/test/TEST-04-FULL-SYSTEMD/99-idesymlinks.rules
new file mode 100644
index 0000000..d557790
--- /dev/null
+++ b/test/TEST-04-FULL-SYSTEMD/99-idesymlinks.rules
@@ -0,0 +1,8 @@
+ACTION=="add|change", SUBSYSTEM=="block", ENV{DEVTYPE}=="disk", KERNEL=="hda", SYMLINK+="sda"
+ACTION=="add|change", SUBSYSTEM=="block", ENV{DEVTYPE}=="partition", KERNEL=="hda*", SYMLINK+="sda$env{MINOR}"
+ACTION=="add|change", SUBSYSTEM=="block", ENV{DEVTYPE}=="disk", KERNEL=="hdb", SYMLINK+="sdb"
+ACTION=="add|change", SUBSYSTEM=="block", ENV{DEVTYPE}=="partition", KERNEL=="hdb*", SYMLINK+="sdb$env{MINOR}"
+ACTION=="add|change", SUBSYSTEM=="block", ENV{DEVTYPE}=="disk", KERNEL=="hdc", SYMLINK+="sdc"
+ACTION=="add|change", SUBSYSTEM=="block", ENV{DEVTYPE}=="partition", KERNEL=="hdc*", SYMLINK+="sdc$env{MINOR}"
+ACTION=="add|change", SUBSYSTEM=="block", ENV{DEVTYPE}=="disk", KERNEL=="hdd", SYMLINK+="sdd"
+ACTION=="add|change", SUBSYSTEM=="block", ENV{DEVTYPE}=="partition", KERNEL=="hdd*", SYMLINK+="sdd$env{MINOR}"
diff --git a/test/TEST-04-FULL-SYSTEMD/Makefile b/test/TEST-04-FULL-SYSTEMD/Makefile
new file mode 100644
index 0000000..3cc8993
--- /dev/null
+++ b/test/TEST-04-FULL-SYSTEMD/Makefile
@@ -0,0 +1,10 @@
+all:
+	$(MAKE) -s --no-print-directory -C ../.. all
+	V=$(V) basedir=../.. testdir=../ ./test.sh --all
+setup:
+	@$(MAKE) --no-print-directory -C ../.. all
+	@basedir=../.. testdir=../ ./test.sh --setup
+clean:
+	@basedir=../.. testdir=../ ./test.sh --clean
+run:
+	@basedir=../.. testdir=../ ./test.sh --run
diff --git a/test/TEST-04-FULL-SYSTEMD/create-root.sh b/test/TEST-04-FULL-SYSTEMD/create-root.sh
new file mode 100755
index 0000000..2e33920
--- /dev/null
+++ b/test/TEST-04-FULL-SYSTEMD/create-root.sh
@@ -0,0 +1,39 @@
+#!/bin/sh
+# don't let udev and this script step on eachother's toes
+for x in 64-lvm.rules 70-mdadm.rules 99-mount-rules; do
+    > "/etc/udev/rules.d/$x"
+done
+rm /etc/lvm/lvm.conf
+udevadm control --reload-rules
+set -e
+# save a partition at the beginning for future flagging purposes
+sfdisk -C 10240 -H 2 -S 32 -L /dev/sda <<EOF
+,16
+,
+EOF
+
+sfdisk -C 10240 -H 2 -S 32 -L /dev/sdb <<EOF
+,16
+,
+EOF
+
+
+mkfs.btrfs -L dracut /dev/sda2
+mkfs.btrfs -L dracutusr /dev/sdb2
+btrfs device scan /dev/sda2
+btrfs device scan /dev/sdb2
+mkdir -p /root
+mount -t btrfs /dev/sda2 /root
+[ -d /root/usr ] || mkdir /root/usr
+mount -t btrfs /dev/sdb2 /root/usr
+btrfs subvolume create /root/usr/usr
+umount /root/usr
+mount -t btrfs -o subvol=usr /dev/sdb2 /root/usr
+cp -a -t /root /source/*
+mkdir -p /root/run
+umount /root/usr
+umount /root
+echo "dracut-root-block-created" >/dev/sda1
+sync
+poweroff -f
+
diff --git a/test/TEST-04-FULL-SYSTEMD/cryptroot-ask.sh b/test/TEST-04-FULL-SYSTEMD/cryptroot-ask.sh
new file mode 100755
index 0000000..db27c5b
--- /dev/null
+++ b/test/TEST-04-FULL-SYSTEMD/cryptroot-ask.sh
@@ -0,0 +1,6 @@
+#!/bin/sh
+
+[ -b /dev/mapper/$2 ] && exit 0
+echo -n test >/keyfile
+/sbin/cryptsetup luksOpen $1 $2 </keyfile
+
diff --git a/test/TEST-04-FULL-SYSTEMD/fstab b/test/TEST-04-FULL-SYSTEMD/fstab
new file mode 100644
index 0000000..0cc3370
--- /dev/null
+++ b/test/TEST-04-FULL-SYSTEMD/fstab
@@ -0,0 +1,2 @@
+/dev/sda2	/                       btrfs   defaults         0 0
+/dev/sdb2	/usr                    btrfs   subvol=usr,ro    0 0
diff --git a/test/TEST-04-FULL-SYSTEMD/hard-off.sh b/test/TEST-04-FULL-SYSTEMD/hard-off.sh
new file mode 100755
index 0000000..12c3d5a
--- /dev/null
+++ b/test/TEST-04-FULL-SYSTEMD/hard-off.sh
@@ -0,0 +1,3 @@
+#!/bin/sh
+getarg rd.shell || poweroff -f
+getarg failme && poweroff -f
diff --git a/test/TEST-04-FULL-SYSTEMD/test-init.sh b/test/TEST-04-FULL-SYSTEMD/test-init.sh
new file mode 100755
index 0000000..cc26017
--- /dev/null
+++ b/test/TEST-04-FULL-SYSTEMD/test-init.sh
@@ -0,0 +1,29 @@
+#!/bin/sh
+>/dev/watchdog
+export PATH=/sbin:/bin:/usr/sbin:/usr/bin
+strstr() { [ "${1#*$2*}" != "$1" ]; }
+CMDLINE=$(while read line; do echo $line;done < /proc/cmdline)
+plymouth --quit
+exec </dev/console >/dev/console 2>&1
+
+ismounted() {
+    while read a m a; do
+        [ "$m" = "$1" ] && return 0
+    done < /proc/mounts
+    return 1
+}
+
+if ismounted /usr; then
+    echo "dracut-root-block-success" >/dev/sdc
+fi
+export TERM=linux
+export PS1='initramfs-test:\w\$ '
+[ -f /etc/mtab ] || ln -sfn /proc/mounts /etc/mtab
+[ -f /etc/fstab ] || ln -sfn /proc/mounts /etc/fstab
+stty sane
+echo "made it to the rootfs!"
+if strstr "$CMDLINE" "rd.shell"; then
+	strstr "$(setsid --help)" "control" && CTTY="-c"
+	setsid $CTTY sh -i
+fi
+echo "Powering down."
diff --git a/test/TEST-04-FULL-SYSTEMD/test.sh b/test/TEST-04-FULL-SYSTEMD/test.sh
new file mode 100755
index 0000000..921189f
--- /dev/null
+++ b/test/TEST-04-FULL-SYSTEMD/test.sh
@@ -0,0 +1,273 @@
+#!/bin/bash
+
+TEST_DESCRIPTION="Full systemd serialization/deserialization test with /usr mount"
+
+KVERSION=${KVERSION-$(uname -r)}
+
+# Uncomment this to debug failures
+#DEBUGFAIL="rd.shell rd.break"
+
+client_run() {
+    local test_name="$1"; shift
+    local client_opts="$*"
+
+    echo "CLIENT TEST START: $test_name"
+
+    dd if=/dev/zero of=$TESTDIR/result bs=1M count=1
+    $testdir/run-qemu \
+	-hda $TESTDIR/root.btrfs \
+	-hdb $TESTDIR/usr.btrfs \
+	-hdc $TESTDIR/result \
+	-m 256M -nographic \
+	-net none -kernel /boot/vmlinuz-$KVERSION \
+	-append "root=LABEL=dracut $client_opts quiet systemd.log_level=debug systemd.log_target=console loglevel=77 rd.retry=3 rd.info console=ttyS0,115200n81 selinux=0 rd.debug $DEBUGFAIL" \
+	-initrd $TESTDIR/initramfs.testing
+
+    if (($? != 0)); then
+	echo "CLIENT TEST END: $test_name [FAILED - BAD EXIT]"
+        return 1
+    fi
+
+    if ! grep -m 1 -q dracut-root-block-success $TESTDIR/result; then
+	echo "CLIENT TEST END: $test_name [FAILED]"
+        return 1
+    fi
+    echo "CLIENT TEST END: $test_name [OK]"
+
+}
+
+test_run() {
+    client_run "no option specified" || return 1
+    client_run "readonly root" "ro" || return 1
+    client_run "writeable root" "rw" || return 1
+    return 0
+}
+
+test_setup() {
+    rm -f $TESTDIR/root.btrfs
+    rm -f $TESTDIR/usr.btrfs
+    # Create the blank file to use as a root filesystem
+    dd if=/dev/null of=$TESTDIR/root.btrfs bs=1M seek=320
+    dd if=/dev/null of=$TESTDIR/usr.btrfs bs=1M seek=320
+
+    kernel=$KVERSION
+    # Create what will eventually be our root filesystem onto an overlay
+    (
+	export initdir=$TESTDIR/overlay/source
+	mkdir -p $initdir
+	. $basedir/dracut-functions.sh
+
+        for d in usr/bin usr/sbin bin etc lib "$libdir" sbin tmp usr var var/log dev proc sys sysroot root run run/lock run/initramfs; do
+            if [ -L "/$d" ]; then
+                inst_symlink "/$d"
+            else
+                inst_dir "/$d"
+            fi
+        done
+
+        ln -sfn /run "$initdir/var/run"
+        ln -sfn /run/lock "$initdir/var/lock"
+
+	dracut_install sh df free ls shutdown poweroff stty cat ps ln ip route \
+	    mount dmesg ifconfig dhclient mkdir cp ping dhclient \
+	    umount strace less setsid
+	for _terminfodir in /lib/terminfo /etc/terminfo /usr/share/terminfo; do
+            [ -f ${_terminfodir}/l/linux ] && break
+	done
+	dracut_install -o ${_terminfodir}/l/linux
+	inst "$basedir/modules.d/40network/dhclient-script.sh" "/sbin/dhclient-script"
+	inst "$basedir/modules.d/40network/ifup.sh" "/sbin/ifup"
+	dracut_install grep
+        inst_simple ./fstab /etc/fstab
+        rpm -ql systemd | xargs -r $DRACUT_INSTALL ${initdir+-D "$initdir"} -o -a -l
+        inst /lib/systemd/system/systemd-journal-flush.service
+        inst /etc/sysconfig/init
+        # activate kmsg import
+        echo 'ImportKernel=yes' >> $initdir/etc/systemd/journald.conf
+
+        # make a journal directory
+        mkdir -p $initdir/var/log/journal
+
+        # install some basic config files
+        dracut_install -o  \
+            /etc/sysconfig/init \
+            /etc/passwd \
+            /etc/shadow \
+            /etc/group \
+            /etc/shells \
+            /etc/nsswitch.conf \
+            /etc/pam.conf \
+            /etc/securetty \
+            /etc/os-release \
+            /etc/localtime
+
+        # we want an empty environment
+        > $initdir/etc/environment
+        > $initdir/etc/machine-id
+
+        # set the hostname
+        echo  systemd-testsuite > $initdir/etc/hostname
+
+        # setup the testsuite target
+        cat >$initdir/etc/systemd/system/testsuite.target <<EOF
+[Unit]
+Description=Testsuite target
+Requires=multi-user.target
+After=multi-user.target
+Conflicts=rescue.target
+AllowIsolate=yes
+EOF
+
+        inst ./test-init.sh /sbin/test-init
+
+        # setup the testsuite service
+        cat >$initdir/etc/systemd/system/testsuite.service <<EOF
+[Unit]
+Description=Testsuite service
+After=multi-user.target
+
+[Service]
+ExecStart=/sbin/test-init
+ExecStopPost=/usr/bin/systemctl poweroff
+Type=oneshot
+EOF
+        mkdir -p $initdir/etc/systemd/system/testsuite.target.wants
+        ln -fs ../testsuite.service $initdir/etc/systemd/system/testsuite.target.wants/testsuite.service
+
+        # make the testsuite the default target
+        ln -fs testsuite.target $initdir/etc/systemd/system/default.target
+        mkdir -p $initdir/etc/rc.d
+        cat >$initdir/etc/rc.d/rc.local <<EOF
+#!/bin/bash
+exit 0
+EOF
+
+        # install basic tools needed
+        dracut_install sh bash setsid loadkeys setfont \
+            login sushell sulogin gzip sleep echo mount umount
+        dracut_install modprobe
+
+        # install libnss_files for login
+        inst_libdir_file "libnss_files*"
+
+        # install dbus and pam
+        find \
+            /etc/dbus-1 \
+            /etc/pam.d \
+            /etc/security \
+            /lib64/security \
+            /lib/security -xtype f \
+            | while read file; do
+            dracut_install -o $file
+        done
+
+        # install dbus socket and service file
+        inst /usr/lib/systemd/system/dbus.socket
+        inst /usr/lib/systemd/system/dbus.service
+
+        # install basic keyboard maps and fonts
+        for i in \
+            /usr/lib/kbd/consolefonts/latarcyrheb-sun16* \
+            /usr/lib/kbd/keymaps/include/* \
+            /usr/lib/kbd/keymaps/i386/include/* \
+            /usr/lib/kbd/keymaps/i386/qwerty/us.*; do
+                [[ -f $i ]] || continue
+                inst $i
+        done
+
+        # some basic terminfo files
+        for _terminfodir in /lib/terminfo /etc/terminfo /usr/share/terminfo; do
+            [ -f ${_terminfodir}/l/linux ] && break
+        done
+        dracut_install -o ${_terminfodir}/l/linux
+
+        # softlink mtab
+        ln -fs /proc/self/mounts $initdir/etc/mtab
+
+        # install any Exec's from the service files
+        egrep -ho '^Exec[^ ]*=[^ ]+' $initdir/lib/systemd/system/*.service \
+            | while read i; do
+            i=${i##Exec*=}; i=${i##-}
+            dracut_install -o $i
+        done
+
+        # some helper tools for debugging
+        [[ $DEBUGTOOLS ]] && dracut_install $DEBUGTOOLS
+
+        # install ld.so.conf* and run ldconfig
+        cp -a /etc/ld.so.conf* $initdir/etc
+        ldconfig -r "$initdir"
+        ddebug "Strip binaeries"
+        find "$initdir" -perm +111 -type f | xargs strip --strip-unneeded | ddebug
+
+        # copy depmod files
+        inst /lib/modules/$KERNEL_VER/modules.order
+        inst /lib/modules/$KERNEL_VER/modules.builtin
+        # generate module dependencies
+        if [[ -d $initdir/lib/modules/$KERNEL_VER ]] && \
+            ! depmod -a -b "$initdir" $KERNEL_VER; then
+                dfatal "\"depmod -a $KERNEL_VER\" failed."
+                exit 1
+        fi
+
+    )
+#exit 1
+    # second, install the files needed to make the root filesystem
+    (
+	export initdir=$TESTDIR/overlay
+	. $basedir/dracut-functions.sh
+	dracut_install sfdisk mkfs.btrfs btrfs poweroff cp umount sync
+	inst_hook initqueue 01 ./create-root.sh
+	inst_simple ./99-idesymlinks.rules /etc/udev/rules.d/99-idesymlinks.rules
+    )
+
+    # create an initramfs that will create the target root filesystem.
+    # We do it this way so that we do not risk trashing the host mdraid
+    # devices, volume groups, encrypted partitions, etc.
+    $basedir/dracut.sh -l -i $TESTDIR/overlay / \
+	-m "dash udev-rules btrfs base rootfs-block kernel-modules" \
+	-d "piix ide-gd_mod ata_piix btrfs sd_mod" \
+        --nomdadmconf \
+        --nohardlink \
+	-f $TESTDIR/initramfs.makeroot $KVERSION || return 1
+
+    # Invoke KVM and/or QEMU to actually create the target filesystem.
+
+#    echo $TESTDIR/overlay
+#    echo $TESTDIR/initramfs.makeroot
+#exit 1
+    rm -rf $TESTDIR/overlay
+
+    $testdir/run-qemu \
+	-hda $TESTDIR/root.btrfs \
+	-hdb $TESTDIR/usr.btrfs \
+	-m 256M -nographic -net none \
+	-kernel "/boot/vmlinuz-$kernel" \
+	-append "root=/dev/dracut/root rw rootfstype=btrfs quiet console=ttyS0,115200n81 selinux=0" \
+	-initrd $TESTDIR/initramfs.makeroot  || return 1
+    grep -m 1 -q dracut-root-block-created $TESTDIR/root.btrfs || return 1
+
+
+    (
+	export initdir=$TESTDIR/overlay
+	. $basedir/dracut-functions.sh
+	dracut_install poweroff shutdown
+	inst_hook emergency 000 ./hard-off.sh
+	inst_simple ./99-idesymlinks.rules /etc/udev/rules.d/99-idesymlinks.rules
+    )
+    sudo $basedir/dracut.sh -l -i $TESTDIR/overlay / \
+	-a "debug watchdog" \
+        -o "network" \
+	-d "piix ide-gd_mod ata_piix btrfs sd_mod ib700wdt" \
+	-f $TESTDIR/initramfs.testing $KVERSION || return 1
+
+    rm -rf $TESTDIR/overlay
+
+#	-o "plymouth network md dmraid multipath fips caps crypt btrfs resume dmsquash-live dm"
+}
+
+test_cleanup() {
+    return 0
+}
+
+. $testdir/test-functions
