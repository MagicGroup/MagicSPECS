diff -Nur qt-everywhere-opensource-src-4.8.4-orig/src/corelib/arch/generic/qatomic_generic_unix.cpp qt-everywhere-opensource-src-4.8.4/src/corelib/arch/generic/qatomic_generic_unix.cpp
--- qt-everywhere-opensource-src-4.8.4-orig/src/corelib/arch/generic/qatomic_generic_unix.cpp 2013-05-19 11:37:07.000000000 -0400
+++ qt-everywhere-opensource-src-4.8.4/src/corelib/arch/generic/qatomic_generic_unix.cpp 2013-05-19 11:52:58.000000000 -0400
@@ -84,9 +84,9 @@
 }
 
 Q_CORE_EXPORT
-bool QBasicAtomicPointer_testAndSetOrdered(void * volatile *_q_value,
-                                           void *expectedValue,
-                                           void *newValue)
+bool QBasicAtomicPointer_testAndSetOrdered(const void * volatile *_q_value,
+                                           const void *expectedValue,
+                                           const void *newValue)
 {
     bool returnValue = false;
     pthread_mutex_lock(&qAtomicMutex);
@@ -99,9 +99,9 @@
 }
 
 Q_CORE_EXPORT
-void *QBasicAtomicPointer_fetchAndStoreOrdered(void * volatile *_q_value, void *newValue)
+const void *QBasicAtomicPointer_fetchAndStoreOrdered(const void * volatile *_q_value, const void *newValue)
 {
-    void *returnValue;
+    const void *returnValue;
     pthread_mutex_lock(&qAtomicMutex);
     returnValue = *_q_value;
     *_q_value = newValue;
@@ -110,12 +110,12 @@
 }
 
 Q_CORE_EXPORT
-void *QBasicAtomicPointer_fetchAndAddOrdered(void * volatile *_q_value, qptrdiff valueToAdd)
+const void *QBasicAtomicPointer_fetchAndAddOrdered(const void * volatile *_q_value, qptrdiff valueToAdd)
 {
-    void *returnValue;
+    const void *returnValue;
     pthread_mutex_lock(&qAtomicMutex);
     returnValue = *_q_value;
-    *_q_value = reinterpret_cast<char *>(returnValue) + valueToAdd;
+    *_q_value = reinterpret_cast<const void *>(returnValue) + valueToAdd;
     pthread_mutex_unlock(&qAtomicMutex);
     return returnValue;
 }
diff -Nur qt-everywhere-opensource-src-4.8.4-orig/src/corelib/arch/qatomic_generic.h qt-everywhere-opensource-src-4.8.4/src/corelib/arch/qatomic_generic.h
--- qt-everywhere-opensource-src-4.8.4-orig/src/corelib/arch/qatomic_generic.h 2013-05-19 11:37:07.000000000 -0400
+++ qt-everywhere-opensource-src-4.8.4/src/corelib/arch/qatomic_generic.h 2013-05-19 11:39:56.000000000 -0400
@@ -105,9 +105,9 @@
 Q_CORE_EXPORT int QBasicAtomicInt_fetchAndStoreOrdered(volatile int *, int);
 Q_CORE_EXPORT int QBasicAtomicInt_fetchAndAddOrdered(volatile int *, int);
 
-Q_CORE_EXPORT bool QBasicAtomicPointer_testAndSetOrdered(void * volatile *, void *, void *);
-Q_CORE_EXPORT void *QBasicAtomicPointer_fetchAndStoreOrdered(void * volatile *, void *);
-Q_CORE_EXPORT void *QBasicAtomicPointer_fetchAndAddOrdered(void * volatile *, qptrdiff);
+Q_CORE_EXPORT bool QBasicAtomicPointer_testAndSetOrdered(const void * volatile *, const void *, const void *);
+Q_CORE_EXPORT const void *QBasicAtomicPointer_fetchAndStoreOrdered(const void * volatile *, const void *);
+Q_CORE_EXPORT const void *QBasicAtomicPointer_fetchAndAddOrdered(const void * volatile *, qptrdiff);
 
 // Reference counting
 
@@ -192,7 +192,7 @@
 template <typename T>
 Q_INLINE_TEMPLATE bool QBasicAtomicPointer<T>::testAndSetOrdered(T *expectedValue, T *newValue)
 {
-    union { T * volatile * typed; void * volatile * voidp; } pointer;
+    union { T * volatile * typed; const void * volatile * voidp; } pointer;
     pointer.typed = &_q_value;
     return QBasicAtomicPointer_testAndSetOrdered(pointer.voidp, expectedValue, newValue);
 }
@@ -220,8 +220,8 @@
 template <typename T>
 Q_INLINE_TEMPLATE T *QBasicAtomicPointer<T>::fetchAndStoreOrdered(T *newValue)
 {
-    union { T * volatile * typed; void * volatile * voidp; } pointer;
-    union { T *typed; void *voidp; } returnValue;
+    union { T * volatile * typed; const void * volatile * voidp; } pointer;
+    union { T *typed; const void *voidp; } returnValue;
     pointer.typed = &_q_value;
     returnValue.voidp = QBasicAtomicPointer_fetchAndStoreOrdered(pointer.voidp, newValue);
     return returnValue.typed;
@@ -250,8 +250,8 @@
 template <typename T>
 Q_INLINE_TEMPLATE T *QBasicAtomicPointer<T>::fetchAndAddOrdered(qptrdiff valueToAdd)
 {
-    union { T * volatile *typed; void * volatile *voidp; } pointer;
-    union { T *typed; void *voidp; } returnValue;
+    union { T * volatile *typed; const void * volatile *voidp; } pointer;
+    union { T *typed; const void *voidp; } returnValue;
     pointer.typed = &_q_value;
     returnValue.voidp = QBasicAtomicPointer_fetchAndAddOrdered(pointer.voidp, valueToAdd * sizeof(T));
     return returnValue.typed;
