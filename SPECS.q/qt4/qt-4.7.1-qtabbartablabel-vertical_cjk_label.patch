diff -Nuarp a/src/gui/styles/qcommonstyle.cpp b/src/gui/styles/qcommonstyle.cpp
--- a/src/gui/styles/qcommonstyle.cpp   2010-10-11 18:29:38.000000000 +0800
+++ b/src/gui/styles/qcommonstyle.cpp   2010-10-11 19:34:37.056661762 +0800
@@ -1137,12 +1137,6 @@ void QCommonStylePrivate::tabLayout(cons
     Q_ASSERT(textRect);
     Q_ASSERT(iconRect);
     QRect tr = opt->rect;
-    bool verticalTabs = opt->shape == QTabBar::RoundedEast
-                        || opt->shape == QTabBar::RoundedWest
-                        || opt->shape == QTabBar::TriangularEast
-                        || opt->shape == QTabBar::TriangularWest;
-    if (verticalTabs)
-        tr.setRect(0, 0, tr.height(), tr.width()); //0, 0 as we will have a translate transform

     int verticalShift = proxyStyle->pixelMetric(QStyle::PM_TabBarTabShiftVertical, opt, widget);
     int horizontalShift = proxyStyle->pixelMetric(QStyle::PM_TabBarTabShiftHorizontal, opt, widget);
@@ -1158,15 +1152,11 @@ void QCommonStylePrivate::tabLayout(cons
     }

     // left widget
-    if (!opt->leftButtonSize.isEmpty()) {
-        tr.setLeft(tr.left() + 4 +
-            (verticalTabs ? opt->leftButtonSize.height() : opt->leftButtonSize.width()));
-    }
+    if (!opt->leftButtonSize.isEmpty())
+        tr.setLeft(tr.left() + 4 + opt->leftButtonSize.width());
     // right widget
-    if (!opt->rightButtonSize.isEmpty()) {
-        tr.setRight(tr.right() - 4 -
-        (verticalTabs ? opt->rightButtonSize.height() : opt->rightButtonSize.width()));
-    }
+    if (!opt->rightButtonSize.isEmpty())
+        tr.setRight(tr.right() - 4 - opt->rightButtonSize.width());

     // icon
     if (!opt->icon.isNull()) {
@@ -1181,13 +1171,53 @@ void QCommonStylePrivate::tabLayout(cons

         *iconRect = QRect(tr.left(), tr.center().y() - tabIconSize.height() / 2,
                     tabIconSize.width(), tabIconSize .height());
-        if (!verticalTabs)
-            *iconRect = proxyStyle->visualRect(opt->direction, opt->rect, *iconRect);
+        *iconRect = proxyStyle->visualRect(opt->direction, opt->rect, *iconRect);
         tr.setLeft(tr.left() + tabIconSize.width() + 4);
     }

-    if (!verticalTabs)
-        tr = proxyStyle->visualRect(opt->direction, opt->rect, tr);
+    tr = proxyStyle->visualRect(opt->direction, opt->rect, tr);
+    *textRect = tr;
+}
+
+void QCommonStylePrivate::tabLayoutV(const QStyleOptionTabV3 *opt, const QWidget *widget, QRect *textRect, QRect *iconRect) const
+{
+    Q_ASSERT(textRect);
+    Q_ASSERT(iconRect);
+    QRect tr = opt->rect;
+
+    int verticalShift = proxyStyle->pixelMetric(QStyle::PM_TabBarTabShiftVertical, opt, widget);
+    int horizontalShift = proxyStyle->pixelMetric(QStyle::PM_TabBarTabShiftHorizontal, opt, widget);
+    int hpadding = proxyStyle->pixelMetric(QStyle::PM_TabBarTabHSpace, opt, widget) / 2;
+    int vpadding = proxyStyle->pixelMetric(QStyle::PM_TabBarTabVSpace, opt, widget) / 2;
+    tr.adjust(verticalShift - vpadding, hpadding, vpadding, horizontalShift - hpadding);
+    bool selected = opt->state & QStyle::State_Selected;
+    if (selected) {
+        tr.setTop(tr.top() + horizontalShift);
+        tr.setRight(tr.right() - verticalShift);
+    }
+
+    // top widget
+    if (!opt->leftButtonSize.isEmpty())
+        tr.setTop(tr.top() + 4 + opt->rightButtonSize.height());
+    // bottom widget
+    if (!opt->rightButtonSize.isEmpty())
+        tr.setBottom(tr.bottom() - 4 - opt->leftButtonSize.height());
+
+    // icon
+    if (!opt->icon.isNull()) {
+        QSize iconSize = opt->iconSize;
+        if (!iconSize.isValid()) {
+            int iconExtent = proxyStyle->pixelMetric(QStyle::PM_SmallIconSize);
+            iconSize = QSize(iconExtent, iconExtent);
+        }
+        QSize tabIconSize = opt->icon.actualSize(iconSize,
+                        (opt->state & QStyle::State_Enabled) ? QIcon::Normal : QIcon::Disabled,
+                        (opt->state & QStyle::State_Selected) ? QIcon::On : QIcon::Off  );
+
+        *iconRect = QRect(tr.center().x() - tabIconSize.width() / 2, tr.y(),
+                    tabIconSize.width(), tabIconSize.height());
+        tr.setTop(tr.top() + tabIconSize.height() + 4);
+    }

     *textRect = tr;
 }
@@ -1863,25 +1893,13 @@ void QCommonStyle::drawControl(ControlEl
             if (!proxy()->styleHint(SH_UnderlineShortcut, opt, widget))
                 alignment |= Qt::TextHideMnemonic;

-            if (verticalTabs) {
-                p->save();
-                int newX, newY, newRot;
-                if (tabV2.shape == QTabBar::RoundedEast || tabV2.shape == QTabBar::TriangularEast) {
-                    newX = tr.width() + tr.x();
-                    newY = tr.y();
-                    newRot = 90;
-                } else {
-                    newX = tr.x();
-                    newY = tr.y() + tr.height();
-                    newRot = -90;
-                }
-                QTransform m = QTransform::fromTranslate(newX, newY);
-                m.rotate(newRot);
-                p->setTransform(m, true);
-            }
             QRect iconRect;
-            d->tabLayout(&tabV2, widget, &tr, &iconRect);
-            tr = proxy()->subElementRect(SE_TabBarTabText, opt, widget); //we compute tr twice because the style may override subElementRect
+            if (verticalTabs)
+                d->tabLayoutV(&tabV2, widget, &tr, &iconRect);
+            else {
+                d->tabLayout(&tabV2, widget, &tr, &iconRect);
+                tr = proxy()->subElementRect(SE_TabBarTabText, opt, widget); //we compute tr twice because the style may override subElementRect
+            }

             if (!tabV2.icon.isNull()) {
                 QPixmap tabIcon = tabV2.icon.pixmap(tabV2.iconSize,
@@ -1892,9 +1910,50 @@ void QCommonStyle::drawControl(ControlEl
                 p->drawPixmap(iconRect.x(), iconRect.y(), tabIcon);
             }

-            proxy()->drawItemText(p, tr, alignment, tab->palette, tab->state & State_Enabled, tab->text, QPalette::WindowText);
-            if (verticalTabs)
-                p->restore();
+            if (verticalTabs) {
+                QFontMetrics fm = p->fontMetrics();
+                int x = tr.x();
+                int y = tr.y();
+                int chPixelsWide = 0;
+                int chPixelsHigh = fm.height();
+                QRect chrect;
+                foreach (const QChar& ch, tab->text) {
+                    chPixelsWide = fm.width(ch);
+                    const unsigned short code = ch.unicode();
+                    if (code >= 0x4E00 && code <= 0x9FBF// CJK Unified Ideographs
+                        || code >= 0x3400 && code <= 0x4DBF// CJK Unified Ideographs Extension A
+                        || code >= 0xF900 && code <= 0xFAFF// CJK Compatibility Ideographs
+                        || code >= 0x3040 && code <= 0x30FF// Hiragana, Katakana
+                        || code >= 0xAC00 && code <= 0xD7AF// Hangul Syllables
+                        || code >= 0x1100 && code <= 0x11FF// Hangul Jamo
+                        || code >= 0x31F0 && code <= 0x31FF// Katakana Phonetic Extensions
+                        || code >= 0x3130 && code <= 0x318F// Hangul Compatibility Jamo
+                        || code >= 0x2E80 && code <= 0x2EFF// CJK Radicals Supplement
+                        || code >= 0x3200 && code <= 0x33FF// Enclosed CJK Letters and Months, CJK Compatibility
+                        || code >= 0xFE30 && code <= 0xFE4F// CJK Compatibility Forms
+                    ) {
+                        // http://en.wikipedia.org/wiki/Horizontal_and_vertical_writing_in_East_Asian_scripts
+                        // NOTE: not perfect at all, but enough for tabbar labels --- nihui  ^^:)
+                        chrect.setRect(x, y, tr.width(), chPixelsHigh);
+                        proxy()->drawItemText(p, chrect, Qt::AlignTop | Qt::AlignHCenter, tab->palette, tab->state & State_Enabled, ch, QPalette::WindowText);
+                    }
+                    else {
+                        p->save();
+                        int newX = x + tr.width();
+                        int newY = y;
+                        int newRot = 90;
+                        QTransform m = QTransform::fromTranslate(newX, newY);
+                        m.rotate(newRot);
+                        p->setTransform(m, true);
+                        chrect.setRect(0, 0, chPixelsWide, tr.width());
+                        proxy()->drawItemText(p, chrect, Qt::AlignLeading | Qt::AlignVCenter, tab->palette, tab->state & State_Enabled, ch, QPalette::WindowText);
+                        p->restore();
+                    }
+                    y += chPixelsWide;
+                }
+            }
+            else
+                proxy()->drawItemText(p, tr, alignment, tab->palette, tab->state & State_Enabled, tab->text, QPalette::WindowText);

             if (tabV2.state & State_HasFocus) {
                 const int OFFSET = 1 + pixelMetric(PM_DefaultFrameWidth);
diff -Nuarp a/src/gui/styles/qcommonstyle_p.h b/src/gui/styles/qcommonstyle_p.h
--- a/src/gui/styles/qcommonstyle_p.h   2010-10-11 18:42:57.000000000 +0800
+++ b/src/gui/styles/qcommonstyle_p.h   2010-10-11 18:43:59.564464192 +0800
@@ -105,6 +105,7 @@ public:
     mutable QIcon tabBarcloseButtonIcon;
 #ifndef QT_NO_TABBAR
     void tabLayout(const QStyleOptionTabV3 *opt, const QWidget *widget, QRect *textRect, QRect *pixmapRect) const;
+    void tabLayoutV(const QStyleOptionTabV3 *opt, const QWidget *widget, QRect *textRect, QRect *pixmapRect) const;
 #endif
 };

