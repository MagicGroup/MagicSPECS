diff -up chromium-14.0.835.186/chrome/browser/sync/notifier/cache_invalidation_packet_handler.cc.jingle060 chromium-14.0.835.186/chrome/browser/sync/notifier/cache_invalidation_packet_handler.cc
--- chromium-14.0.835.186/chrome/browser/sync/notifier/cache_invalidation_packet_handler.cc.jingle060	2011-09-20 04:27:01.000000000 -0400
+++ chromium-14.0.835.186/chrome/browser/sync/notifier/cache_invalidation_packet_handler.cc	2011-09-27 16:55:03.003004069 -0400
@@ -45,7 +45,7 @@ class CacheInvalidationListenTask : publ
  public:
   // Takes ownership of callback.
   CacheInvalidationListenTask(
-      Task* parent,
+      buzz::XmppTaskParentInterface* parent,
       Callback1<const std::string&>::Type* callback,
       Callback1<const std::string&>::Type* context_change_callback)
       : XmppTask(parent, buzz::XmppEngine::HL_TYPE),
@@ -131,7 +131,7 @@ std::string MakeProtocolVersion() {
 // A task that sends a single outbound ClientInvalidation message.
 class CacheInvalidationSendMessageTask : public buzz::XmppTask {
  public:
-  CacheInvalidationSendMessageTask(Task* parent,
+  CacheInvalidationSendMessageTask(buzz::XmppTaskParentInterface* parent,
                                    const buzz::Jid& to_jid,
                                    const std::string& msg,
                                    int seq,
@@ -219,7 +219,7 @@ std::string MakeSid() {
 }  // namespace
 
 CacheInvalidationPacketHandler::CacheInvalidationPacketHandler(
-    base::WeakPtr<talk_base::Task> base_task)
+    base::WeakPtr<buzz::XmppTaskParentInterface> base_task)
     : scoped_callback_factory_(ALLOW_THIS_IN_INITIALIZER_LIST(this)),
       base_task_(base_task),
       seq_(0),
diff -up chromium-14.0.835.186/chrome/browser/sync/notifier/cache_invalidation_packet_handler.h.jingle060 chromium-14.0.835.186/chrome/browser/sync/notifier/cache_invalidation_packet_handler.h
--- chromium-14.0.835.186/chrome/browser/sync/notifier/cache_invalidation_packet_handler.h.jingle060	2011-09-20 04:27:01.000000000 -0400
+++ chromium-14.0.835.186/chrome/browser/sync/notifier/cache_invalidation_packet_handler.h	2011-09-27 16:55:03.006004069 -0400
@@ -19,9 +19,9 @@
 #include "base/threading/non_thread_safe.h"
 #include "google/cacheinvalidation/v2/system-resources.h"
 
-namespace talk_base {
-class Task;
-}  // namespace
+namespace buzz {
+class XmppTaskParentInterface;
+}  // namespace buzz
 
 namespace sync_notifier {
 
@@ -32,7 +32,7 @@ class CacheInvalidationPacketHandler {
   // |invalidation_client| must not already be routing packets through
   // something.  Does not take ownership of |invalidation_client|.
   CacheInvalidationPacketHandler(
-      base::WeakPtr<talk_base::Task> base_task);
+      base::WeakPtr<buzz::XmppTaskParentInterface> base_task);
 
   // Makes the invalidation client passed into the constructor not
   // route packets through the XMPP client passed into the constructor
@@ -55,7 +55,7 @@ class CacheInvalidationPacketHandler {
   base::ScopedCallbackFactory<CacheInvalidationPacketHandler>
       scoped_callback_factory_;
 
-  base::WeakPtr<talk_base::Task> base_task_;
+  base::WeakPtr<buzz::XmppTaskParentInterface> base_task_;
 
   scoped_ptr<invalidation::MessageCallback> incoming_receiver_;
 
diff -up chromium-14.0.835.186/chrome/browser/sync/notifier/chrome_invalidation_client.cc.jingle060 chromium-14.0.835.186/chrome/browser/sync/notifier/chrome_invalidation_client.cc
--- chromium-14.0.835.186/chrome/browser/sync/notifier/chrome_invalidation_client.cc.jingle060	2011-09-20 04:27:01.000000000 -0400
+++ chromium-14.0.835.186/chrome/browser/sync/notifier/chrome_invalidation_client.cc	2011-09-27 16:55:03.022004070 -0400
@@ -44,7 +44,8 @@ ChromeInvalidationClient::~ChromeInvalid
 void ChromeInvalidationClient::Start(
     const std::string& client_id, const std::string& client_info,
     const std::string& state, Listener* listener,
-    StateWriter* state_writer, base::WeakPtr<talk_base::Task> base_task) {
+    StateWriter* state_writer, 
+    base::WeakPtr<buzz::XmppTaskParentInterface> base_task) {
   DCHECK(non_thread_safe_.CalledOnValidThread());
   Stop();
 
@@ -79,7 +80,7 @@ void ChromeInvalidationClient::Start(
 }
 
 void ChromeInvalidationClient::ChangeBaseTask(
-    base::WeakPtr<talk_base::Task> base_task) {
+    base::WeakPtr<buzz::XmppTaskParentInterface> base_task) {
   DCHECK(invalidation_client_.get());
   DCHECK(base_task.get());
   cache_invalidation_packet_handler_.reset(
diff -up chromium-14.0.835.186/chrome/browser/sync/notifier/chrome_invalidation_client.h.jingle060 chromium-14.0.835.186/chrome/browser/sync/notifier/chrome_invalidation_client.h
--- chromium-14.0.835.186/chrome/browser/sync/notifier/chrome_invalidation_client.h.jingle060	2011-09-20 04:27:01.000000000 -0400
+++ chromium-14.0.835.186/chrome/browser/sync/notifier/chrome_invalidation_client.h	2011-09-27 16:55:03.030004069 -0400
@@ -28,9 +28,9 @@
 // file and include that instead of invalidation-client.h (which
 // includes generated protobuf header files).
 
-namespace talk_base {
-class Task;
-}  // namespace
+namespace buzz {
+class XmppTaskParentInterface;
+}  // namespace buzz
 
 namespace sync_notifier {
 
@@ -63,14 +63,15 @@ class ChromeInvalidationClient
   void Start(
       const std::string& client_id, const std::string& client_info,
       const std::string& state, Listener* listener,
-      StateWriter* state_writer, base::WeakPtr<talk_base::Task> base_task);
+      StateWriter* state_writer, 
+      base::WeakPtr<buzz::XmppTaskParentInterface> base_task);
 
   void Stop();
 
   // Changes the task used to |base_task|, which must still be
   // non-NULL.  Must only be called between calls to Start() and
   // Stop().
-  void ChangeBaseTask(base::WeakPtr<talk_base::Task> base_task);
+  void ChangeBaseTask(base::WeakPtr<buzz::XmppTaskParentInterface> base_task);
 
   // Register the sync types that we're interested in getting
   // notifications for.  May be called at any time.
diff -up chromium-14.0.835.186/chrome/browser/sync/notifier/invalidation_notifier.cc.jingle060 chromium-14.0.835.186/chrome/browser/sync/notifier/invalidation_notifier.cc
--- chromium-14.0.835.186/chrome/browser/sync/notifier/invalidation_notifier.cc.jingle060	2011-09-20 04:27:01.000000000 -0400
+++ chromium-14.0.835.186/chrome/browser/sync/notifier/invalidation_notifier.cc	2011-09-27 16:55:03.038004069 -0400
@@ -93,7 +93,7 @@ void InvalidationNotifier::SendNotificat
 }
 
 void InvalidationNotifier::OnConnect(
-    base::WeakPtr<talk_base::Task> base_task) {
+    base::WeakPtr<buzz::XmppTaskParentInterface> base_task) {
   DCHECK(non_thread_safe_.CalledOnValidThread());
   VLOG(1) << "OnConnect";
   if (state_ >= STARTED) {
diff -up chromium-14.0.835.186/chrome/browser/sync/notifier/invalidation_notifier.h.jingle060 chromium-14.0.835.186/chrome/browser/sync/notifier/invalidation_notifier.h
--- chromium-14.0.835.186/chrome/browser/sync/notifier/invalidation_notifier.h.jingle060	2011-09-20 04:27:01.000000000 -0400
+++ chromium-14.0.835.186/chrome/browser/sync/notifier/invalidation_notifier.h	2011-09-27 16:55:03.046004069 -0400
@@ -54,7 +54,7 @@ class InvalidationNotifier
   virtual void SendNotification() OVERRIDE;
 
   // notifier::LoginDelegate implementation.
-  virtual void OnConnect(base::WeakPtr<talk_base::Task> base_task) OVERRIDE;
+  virtual void OnConnect(base::WeakPtr<buzz::XmppTaskParentInterface> base_task) OVERRIDE;
   virtual void OnDisconnect() OVERRIDE;
 
   // ChromeInvalidationClient::Listener implementation.
diff -up chromium-14.0.835.186/content/renderer/media/rtc_video_decoder.cc.jingle060 chromium-14.0.835.186/content/renderer/media/rtc_video_decoder.cc
--- chromium-14.0.835.186/content/renderer/media/rtc_video_decoder.cc.jingle060	2011-09-27 16:56:20.043970666 -0400
+++ chromium-14.0.835.186/content/renderer/media/rtc_video_decoder.cc	2011-09-27 16:56:38.175964628 -0400
@@ -13,6 +13,7 @@
 #include "media/base/limits.h"
 #include "media/base/video_frame.h"
 #include "media/base/video_util.h"
+#include <talk/session/phone/videoframe.h>
 
 using media::CopyUPlane;
 using media::CopyVPlane;
diff -up chromium-14.0.835.186/content/renderer/media/rtc_video_decoder.h.jingle060 chromium-14.0.835.186/content/renderer/media/rtc_video_decoder.h
--- chromium-14.0.835.186/content/renderer/media/rtc_video_decoder.h.jingle060	2011-09-27 16:56:47.944961292 -0400
+++ chromium-14.0.835.186/content/renderer/media/rtc_video_decoder.h	2011-09-27 16:57:25.246991675 -0400
@@ -14,6 +14,11 @@
 #include "media/base/video_frame.h"
 #include "media/filters/decoder_base.h"
 #include <talk/session/phone/mediachannel.h>
+#include <talk/session/phone/videorenderer.h>
+
+namespace cricket {
+class VideoFrame;
+}  // namespace cricket
 
 class RTCVideoDecoder
     : public media::VideoDecoder,
diff -up chromium-14.0.835.186/content/renderer/media/rtc_video_decoder_unittest.cc.jingle060 chromium-14.0.835.186/content/renderer/media/rtc_video_decoder_unittest.cc
--- chromium-14.0.835.186/content/renderer/media/rtc_video_decoder_unittest.cc.jingle060	2011-09-27 16:57:42.722992407 -0400
+++ chromium-14.0.835.186/content/renderer/media/rtc_video_decoder_unittest.cc	2011-09-27 16:59:08.168970651 -0400
@@ -2,12 +2,13 @@
 // Use of this source code is governed by a BSD-style license that can be
 // found in the LICENSE file.
 
+#include "content/renderer/media/rtc_video_decoder.h"
+
 #include <deque>
 
 #include "base/bind.h"
 #include "base/memory/singleton.h"
 #include "base/string_util.h"
-#include "content/renderer/media/rtc_video_decoder.h"
 #include "media/base/data_buffer.h"
 #include "media/base/filters.h"
 #include "media/base/limits.h"
@@ -17,6 +18,7 @@
 #include "media/base/mock_task.h"
 #include "media/base/video_frame.h"
 #include "testing/gtest/include/gtest/gtest.h"
+#include <talk/session/phone/videoframe.h>
 
 using ::testing::_;
 using ::testing::AnyNumber;
@@ -37,6 +39,69 @@ using media::PipelineStatistics;
 using media::PIPELINE_OK;
 using media::StatisticsCallback;
 
+namespace {
+
+class NullVideoFrame : public cricket::VideoFrame {
+ public:
+  NullVideoFrame() {};
+  virtual ~NullVideoFrame() {};
+
+  virtual size_t GetWidth() const OVERRIDE { return 0; }
+  virtual size_t GetHeight() const OVERRIDE { return 0; }
+  virtual const uint8 *GetYPlane() const OVERRIDE { return NULL; }
+  virtual const uint8 *GetUPlane() const OVERRIDE { return NULL; }
+  virtual const uint8 *GetVPlane() const OVERRIDE { return NULL; }
+  virtual uint8 *GetYPlane() OVERRIDE { return NULL; }
+  virtual uint8 *GetUPlane() OVERRIDE { return NULL; }
+  virtual uint8 *GetVPlane() OVERRIDE { return NULL; }
+  virtual int32 GetYPitch() const OVERRIDE { return 0; }
+  virtual int32 GetUPitch() const OVERRIDE { return 0; }
+  virtual int32 GetVPitch() const OVERRIDE { return 0; }
+
+  virtual size_t GetPixelWidth() const OVERRIDE { return 1; }
+  virtual size_t GetPixelHeight() const OVERRIDE { return 1; }
+  virtual int64 GetElapsedTime() const OVERRIDE { return 0; }
+  virtual int64 GetTimeStamp() const OVERRIDE { return 0; }
+  virtual void SetElapsedTime(int64 elapsed_time) OVERRIDE {}
+  virtual void SetTimeStamp(int64 time_stamp) OVERRIDE {}
+
+  virtual VideoFrame *Copy() const OVERRIDE { return NULL; }
+
+  virtual bool MakeExclusive() OVERRIDE { return true; }
+
+  virtual size_t CopyToBuffer(uint8 *buffer, size_t size) const OVERRIDE {
+    return 0;
+  }
+
+  virtual size_t ConvertToRgbBuffer(uint32 to_fourcc, uint8 *buffer,
+                                    size_t size,
+                                    size_t pitch_rgb) const OVERRIDE {
+    return 0;
+  }
+
+  virtual void StretchToPlanes(uint8 *y, uint8 *u, uint8 *v,
+                               int32 pitchY, int32 pitchU, int32 pitchV,
+                               size_t width, size_t height,
+                               bool interpolate, bool crop) const OVERRIDE {
+  }
+
+  virtual size_t StretchToBuffer(size_t w, size_t h, uint8 *buffer, size_t size,
+                                 bool interpolate, bool crop) const OVERRIDE {
+    return 0;
+  }
+
+  virtual void StretchToFrame(VideoFrame *target, bool interpolate,
+                              bool crop) const OVERRIDE {
+  }
+
+  virtual VideoFrame *Stretch(size_t w, size_t h, bool interpolate,
+                              bool crop) const OVERRIDE {
+    return NULL;
+  }
+};
+
+}  // namespace
+
 class RTCVideoDecoderTest : public testing::Test {
  protected:
   static const int kWidth;
@@ -135,7 +200,7 @@ TEST_F(RTCVideoDecoderTest, DoRenderFram
   EXPECT_CALL(*renderer_.get(), ConsumeVideoFrame(_))
       .Times(Limits::kMaxVideoFrames);
 
-  cricket::NullVideoFrame video_frame;
+  NullVideoFrame video_frame;
 
   for (size_t i = 0; i < Limits::kMaxVideoFrames; ++i) {
     decoder_->RenderFrame(&video_frame);
diff -up chromium-14.0.835.186/jingle/notifier/base/fake_base_task.cc.jingle060 chromium-14.0.835.186/jingle/notifier/base/fake_base_task.cc
--- chromium-14.0.835.186/jingle/notifier/base/fake_base_task.cc.jingle060	2011-09-20 04:26:40.000000000 -0400
+++ chromium-14.0.835.186/jingle/notifier/base/fake_base_task.cc	2011-09-27 16:55:03.055004069 -0400
@@ -45,7 +45,7 @@ FakeBaseTask::FakeBaseTask() {
 
 FakeBaseTask::~FakeBaseTask() {}
 
-base::WeakPtr<talk_base::Task> FakeBaseTask::AsWeakPtr() {
+base::WeakPtr<buzz::XmppTaskParentInterface> FakeBaseTask::AsWeakPtr() {
   return base_task_;
 }
 
diff -up chromium-14.0.835.186/jingle/notifier/base/fake_base_task.h.jingle060 chromium-14.0.835.186/jingle/notifier/base/fake_base_task.h
--- chromium-14.0.835.186/jingle/notifier/base/fake_base_task.h.jingle060	2011-09-20 04:26:40.000000000 -0400
+++ chromium-14.0.835.186/jingle/notifier/base/fake_base_task.h	2011-09-27 16:55:03.063004069 -0400
@@ -13,9 +13,9 @@
 #include "base/memory/weak_ptr.h"
 #include "jingle/notifier/base/task_pump.h"
 
-namespace talk_base {
-class Task;
-}  // namespace talk_base
+namespace buzz {
+class XmppTaskParentInterface;
+}  // namespace buzz
 
 namespace notifier {
 
@@ -24,11 +24,11 @@ class FakeBaseTask {
   FakeBaseTask();
   ~FakeBaseTask();
 
-  base::WeakPtr<talk_base::Task> AsWeakPtr();
+  base::WeakPtr<buzz::XmppTaskParentInterface> AsWeakPtr();
 
  private:
   notifier::TaskPump task_pump_;
-  base::WeakPtr<talk_base::Task> base_task_;
+  base::WeakPtr<buzz::XmppTaskParentInterface> base_task_;
 
   DISALLOW_COPY_AND_ASSIGN(FakeBaseTask);
 };
diff -up chromium-14.0.835.186/jingle/notifier/base/xmpp_connection.h.jingle060 chromium-14.0.835.186/jingle/notifier/base/xmpp_connection.h
--- chromium-14.0.835.186/jingle/notifier/base/xmpp_connection.h.jingle060	2011-09-20 04:26:40.000000000 -0400
+++ chromium-14.0.835.186/jingle/notifier/base/xmpp_connection.h	2011-09-27 16:55:03.071004068 -0400
@@ -22,10 +22,7 @@ namespace buzz {
 class PreXmppAuth;
 class XmlElement;
 class XmppClientSettings;
-}  // namespace
-
-namespace talk_base {
-class Task;
+class XmppTaskParentInterface;
 }  // namespace
 
 namespace notifier {
@@ -42,7 +39,7 @@ class XmppConnection : public sigslot::h
     // Called (at most once) when a connection has been established.
     // |base_task| can be used by the client as the parent of any Task
     // it creates as long as it is valid (i.e., non-NULL).
-    virtual void OnConnect(base::WeakPtr<talk_base::Task> base_task) = 0;
+    virtual void OnConnect(base::WeakPtr<buzz::XmppTaskParentInterface> base_task) = 0;
 
     // Called if an error has occurred (either before or after a call
     // to OnConnect()).  No calls to the delegate will be made after
diff -up chromium-14.0.835.186/jingle/notifier/base/xmpp_connection_unittest.cc.jingle060 chromium-14.0.835.186/jingle/notifier/base/xmpp_connection_unittest.cc
--- chromium-14.0.835.186/jingle/notifier/base/xmpp_connection_unittest.cc.jingle060	2011-09-20 04:26:40.000000000 -0400
+++ chromium-14.0.835.186/jingle/notifier/base/xmpp_connection_unittest.cc	2011-09-27 16:55:03.080004069 -0400
@@ -89,7 +89,7 @@ class MockXmppConnectionDelegate : publi
  public:
   virtual ~MockXmppConnectionDelegate() {}
 
-  MOCK_METHOD1(OnConnect, void(base::WeakPtr<talk_base::Task>));
+  MOCK_METHOD1(OnConnect, void(base::WeakPtr<buzz::XmppTaskParentInterface>));
   MOCK_METHOD3(OnError,
                void(buzz::XmppEngine::Error, int, const buzz::XmlElement*));
 };
diff -up chromium-14.0.835.186/jingle/notifier/communicator/login.cc.jingle060 chromium-14.0.835.186/jingle/notifier/communicator/login.cc
--- chromium-14.0.835.186/jingle/notifier/communicator/login.cc.jingle060	2011-09-20 04:26:40.000000000 -0400
+++ chromium-14.0.835.186/jingle/notifier/communicator/login.cc	2011-09-27 16:55:03.090004069 -0400
@@ -76,7 +76,7 @@ void Login::UpdateXmppSettings(const buz
   *(login_settings_->modifiable_user_settings()) = user_settings;
 }
 
-void Login::OnConnect(base::WeakPtr<talk_base::Task> base_task) {
+void Login::OnConnect(base::WeakPtr<buzz::XmppTaskParentInterface> base_task) {
   ResetReconnectState();
   delegate_->OnConnect(base_task);
 }
diff -up chromium-14.0.835.186/jingle/notifier/communicator/login.h.jingle060 chromium-14.0.835.186/jingle/notifier/communicator/login.h
--- chromium-14.0.835.186/jingle/notifier/communicator/login.h.jingle060	2011-09-20 04:26:40.000000000 -0400
+++ chromium-14.0.835.186/jingle/notifier/communicator/login.h	2011-09-27 16:55:03.097004069 -0400
@@ -21,17 +21,13 @@ namespace buzz {
 class XmppClient;
 class XmppEngine;
 class XmppClientSettings;
+class XmppTaskParentInterface;
 }  // namespace buzz
 
 namespace net {
 class URLRequestContextGetter;
 }  // namespace net
 
-namespace talk_base {
-class Task;
-class TaskParent;
-}  // namespace talk_base
-
 namespace notifier {
 
 class ConnectionOptions;
@@ -51,7 +47,7 @@ class Login : public net::NetworkChangeN
    public:
     virtual ~Delegate() {}
 
-    virtual void OnConnect(base::WeakPtr<talk_base::Task> base_task) = 0;
+    virtual void OnConnect(base::WeakPtr<buzz::XmppTaskParentInterface> base_task) = 0;
     virtual void OnDisconnect() = 0;
   };
 
@@ -76,7 +72,7 @@ class Login : public net::NetworkChangeN
   virtual void OnIPAddressChanged();
 
   // SingleLoginAttempt::Delegate implementation.
-  virtual void OnConnect(base::WeakPtr<talk_base::Task> base_task);
+  virtual void OnConnect(base::WeakPtr<buzz::XmppTaskParentInterface> base_task);
   virtual void OnNeedReconnect();
   virtual void OnRedirect(const std::string& redirect_server,
                           int redirect_port);
diff -up chromium-14.0.835.186/jingle/notifier/communicator/single_login_attempt.cc.jingle060 chromium-14.0.835.186/jingle/notifier/communicator/single_login_attempt.cc
--- chromium-14.0.835.186/jingle/notifier/communicator/single_login_attempt.cc.jingle060	2011-09-20 04:26:40.000000000 -0400
+++ chromium-14.0.835.186/jingle/notifier/communicator/single_login_attempt.cc	2011-09-27 16:55:03.106004070 -0400
@@ -49,7 +49,7 @@ SingleLoginAttempt::SingleLoginAttempt(L
 
 SingleLoginAttempt::~SingleLoginAttempt() {}
 
-void SingleLoginAttempt::OnConnect(base::WeakPtr<talk_base::Task> base_task) {
+void SingleLoginAttempt::OnConnect(base::WeakPtr<buzz::XmppTaskParentInterface> base_task) {
   delegate_->OnConnect(base_task);
 }
 
diff -up chromium-14.0.835.186/jingle/notifier/communicator/single_login_attempt.h.jingle060 chromium-14.0.835.186/jingle/notifier/communicator/single_login_attempt.h
--- chromium-14.0.835.186/jingle/notifier/communicator/single_login_attempt.h.jingle060	2011-09-20 04:26:40.000000000 -0400
+++ chromium-14.0.835.186/jingle/notifier/communicator/single_login_attempt.h	2011-09-27 16:55:03.114004069 -0400
@@ -12,9 +12,9 @@
 #include "jingle/notifier/communicator/xmpp_connection_generator.h"
 #include "talk/xmpp/xmppengine.h"
 
-namespace talk_base {
-class Task;
-}
+namespace buzz {
+class XmppTaskParentInterface;
+}  // namespace buzz
 
 namespace notifier {
 
@@ -32,7 +32,7 @@ class SingleLoginAttempt : public XmppCo
    public:
     virtual ~Delegate() {}
 
-    virtual void OnConnect(base::WeakPtr<talk_base::Task> base_task) = 0;
+    virtual void OnConnect(base::WeakPtr<buzz::XmppTaskParentInterface> base_task) = 0;
     virtual void OnNeedReconnect() = 0;
     virtual void OnRedirect(const std::string& redirect_server,
                             int redirect_port) = 0;
@@ -45,7 +45,7 @@ class SingleLoginAttempt : public XmppCo
   virtual ~SingleLoginAttempt();
 
   // XmppConnection::Delegate implementation.
-  virtual void OnConnect(base::WeakPtr<talk_base::Task> parent);
+  virtual void OnConnect(base::WeakPtr<buzz::XmppTaskParentInterface> parent);
   virtual void OnError(buzz::XmppEngine::Error error,
                        int error_subcode,
                        const buzz::XmlElement* stream_error);
diff -up chromium-14.0.835.186/jingle/notifier/listener/mediator_thread_impl.cc.jingle060 chromium-14.0.835.186/jingle/notifier/listener/mediator_thread_impl.cc
--- chromium-14.0.835.186/jingle/notifier/listener/mediator_thread_impl.cc.jingle060	2011-09-20 04:26:40.000000000 -0400
+++ chromium-14.0.835.186/jingle/notifier/listener/mediator_thread_impl.cc	2011-09-27 16:55:03.123004070 -0400
@@ -38,7 +38,7 @@ class MediatorThreadImpl::Core
   void RemoveObserver(Observer* observer);
 
   // Login::Delegate implementation. Called on I/O thread.
-  virtual void OnConnect(base::WeakPtr<talk_base::Task> base_task);
+  virtual void OnConnect(base::WeakPtr<buzz::XmppTaskParentInterface> base_task);
   virtual void OnDisconnect();
 
   // PushNotificationsListenTaskDelegate implementation. Called on I/O thread.
@@ -63,7 +63,7 @@ class MediatorThreadImpl::Core
   // Invoked on either the caller thread or the I/O thread.
   virtual ~Core();
   scoped_refptr<ObserverListThreadSafe<Observer> > observers_;
-  base::WeakPtr<talk_base::Task> base_task_;
+  base::WeakPtr<buzz::XmppTaskParentInterface> base_task_;
 
   const NotifierOptions notifier_options_;
 
@@ -187,7 +187,7 @@ void MediatorThreadImpl::Core::UpdateXmp
 }
 
 void MediatorThreadImpl::Core::OnConnect(
-    base::WeakPtr<talk_base::Task> base_task) {
+    base::WeakPtr<buzz::XmppTaskParentInterface> base_task) {
   DCHECK(notifier_options_.request_context_getter->GetIOMessageLoopProxy()->
       BelongsToCurrentThread());
   base_task_ = base_task;
@@ -291,7 +291,7 @@ void MediatorThreadImpl::UpdateXmppSetti
 }
 
 void MediatorThreadImpl::TriggerOnConnectForTest(
-    base::WeakPtr<talk_base::Task> base_task) {
+    base::WeakPtr<buzz::XmppTaskParentInterface> base_task) {
     DCHECK(parent_message_loop_proxy_->BelongsToCurrentThread());
   io_message_loop_proxy_->PostTask(
       FROM_HERE,
diff -up chromium-14.0.835.186/jingle/notifier/listener/mediator_thread_impl.h.jingle060 chromium-14.0.835.186/jingle/notifier/listener/mediator_thread_impl.h
--- chromium-14.0.835.186/jingle/notifier/listener/mediator_thread_impl.h.jingle060	2011-09-20 04:26:40.000000000 -0400
+++ chromium-14.0.835.186/jingle/notifier/listener/mediator_thread_impl.h	2011-09-27 16:55:03.131004069 -0400
@@ -36,6 +36,7 @@ class MessageLoopProxy;
 
 namespace buzz {
 class XmppClientSettings;
+class XmppTaskParentInterface;
 }  // namespace buzz
 
 namespace talk_base {
@@ -67,7 +68,7 @@ class MediatorThreadImpl : public Mediat
   // Used by unit tests.  Make sure that tests that use this have the
   // IO message loop proxy passed in via |notifier_options| pointing
   // to the current thread.
-  void TriggerOnConnectForTest(base::WeakPtr<talk_base::Task> base_task);
+  void TriggerOnConnectForTest(base::WeakPtr<buzz::XmppTaskParentInterface> base_task);
 
  private:
   // The logic of Logout without the thread check so it can be called in the
diff -up chromium-14.0.835.186/jingle/notifier/listener/mediator_thread_unittest.cc.jingle060 chromium-14.0.835.186/jingle/notifier/listener/mediator_thread_unittest.cc
--- chromium-14.0.835.186/jingle/notifier/listener/mediator_thread_unittest.cc.jingle060	2011-09-20 04:26:40.000000000 -0400
+++ chromium-14.0.835.186/jingle/notifier/listener/mediator_thread_unittest.cc	2011-09-27 16:55:03.139004069 -0400
@@ -116,7 +116,7 @@ TEST_F(MediatorThreadTest, SendNotificat
     mediator_thread_->SendNotification(Notification());
   }
   mediator_thread_->TriggerOnConnectForTest(
-      base::WeakPtr<talk_base::Task>());
+      base::WeakPtr<buzz::XmppTaskParentInterface>());
   mediator_thread_->TriggerOnConnectForTest(fake_base_task_.AsWeakPtr());
 }
 
diff -up chromium-14.0.835.186/jingle/notifier/listener/push_notifications_listen_task.cc.jingle060 chromium-14.0.835.186/jingle/notifier/listener/push_notifications_listen_task.cc
--- chromium-14.0.835.186/jingle/notifier/listener/push_notifications_listen_task.cc.jingle060	2011-09-20 04:26:40.000000000 -0400
+++ chromium-14.0.835.186/jingle/notifier/listener/push_notifications_listen_task.cc	2011-09-27 16:55:03.148004070 -0400
@@ -19,7 +19,7 @@
 namespace notifier {
 
 PushNotificationsListenTask::PushNotificationsListenTask(
-    Task* parent, Delegate* delegate)
+    buzz::XmppTaskParentInterface* parent, Delegate* delegate)
         : buzz::XmppTask(parent, buzz::XmppEngine::HL_TYPE),
           delegate_(delegate) {
   DCHECK(delegate_);
diff -up chromium-14.0.835.186/jingle/notifier/listener/push_notifications_listen_task.h.jingle060 chromium-14.0.835.186/jingle/notifier/listener/push_notifications_listen_task.h
--- chromium-14.0.835.186/jingle/notifier/listener/push_notifications_listen_task.h.jingle060	2011-09-20 04:26:40.000000000 -0400
+++ chromium-14.0.835.186/jingle/notifier/listener/push_notifications_listen_task.h	2011-09-27 16:55:03.155004068 -0400
@@ -32,7 +32,7 @@ class PushNotificationsListenTask : publ
         const Notification& notification) = 0;
   };
 
-  explicit PushNotificationsListenTask(Task* parent, Delegate* delegate);
+  explicit PushNotificationsListenTask(buzz::XmppTaskParentInterface* parent, Delegate* delegate);
   virtual ~PushNotificationsListenTask();
 
   // Overriden from buzz::XmppTask.
diff -up chromium-14.0.835.186/jingle/notifier/listener/push_notifications_send_update_task.cc.jingle060 chromium-14.0.835.186/jingle/notifier/listener/push_notifications_send_update_task.cc
--- chromium-14.0.835.186/jingle/notifier/listener/push_notifications_send_update_task.cc.jingle060	2011-09-20 04:26:40.000000000 -0400
+++ chromium-14.0.835.186/jingle/notifier/listener/push_notifications_send_update_task.cc	2011-09-27 16:55:03.165004069 -0400
@@ -20,7 +20,7 @@
 namespace notifier {
 
 PushNotificationsSendUpdateTask::PushNotificationsSendUpdateTask(
-    TaskParent* parent, const Notification& notification)
+    buzz::XmppTaskParentInterface* parent, const Notification& notification)
     : XmppTask(parent), notification_(notification) {}
 
 PushNotificationsSendUpdateTask::~PushNotificationsSendUpdateTask() {}
diff -up chromium-14.0.835.186/jingle/notifier/listener/push_notifications_send_update_task.h.jingle060 chromium-14.0.835.186/jingle/notifier/listener/push_notifications_send_update_task.h
--- chromium-14.0.835.186/jingle/notifier/listener/push_notifications_send_update_task.h.jingle060	2011-09-20 04:26:40.000000000 -0400
+++ chromium-14.0.835.186/jingle/notifier/listener/push_notifications_send_update_task.h	2011-09-27 16:55:03.173004070 -0400
@@ -22,7 +22,7 @@ namespace notifier {
 class PushNotificationsSendUpdateTask : public buzz::XmppTask {
  public:
   PushNotificationsSendUpdateTask(
-      TaskParent* parent, const Notification& notification);
+      buzz::XmppTaskParentInterface* parent, const Notification& notification);
   virtual ~PushNotificationsSendUpdateTask();
 
   // Overridden from buzz::XmppTask.
diff -up chromium-14.0.835.186/jingle/notifier/listener/push_notifications_subscribe_task.cc.jingle060 chromium-14.0.835.186/jingle/notifier/listener/push_notifications_subscribe_task.cc
--- chromium-14.0.835.186/jingle/notifier/listener/push_notifications_subscribe_task.cc.jingle060	2011-09-27 16:55:02.101004069 -0400
+++ chromium-14.0.835.186/jingle/notifier/listener/push_notifications_subscribe_task.cc	2011-09-27 16:55:03.183004069 -0400
@@ -19,7 +19,7 @@
 namespace notifier {
 
 PushNotificationsSubscribeTask::PushNotificationsSubscribeTask(
-    TaskParent* parent,
+    buzz::XmppTaskParentInterface* parent,
     const SubscriptionList& subscriptions,
     Delegate* delegate)
     : XmppTask(parent, buzz::XmppEngine::HL_SINGLE),
diff -up chromium-14.0.835.186/jingle/notifier/listener/push_notifications_subscribe_task.h.jingle060 chromium-14.0.835.186/jingle/notifier/listener/push_notifications_subscribe_task.h
--- chromium-14.0.835.186/jingle/notifier/listener/push_notifications_subscribe_task.h.jingle060	2011-09-20 04:26:40.000000000 -0400
+++ chromium-14.0.835.186/jingle/notifier/listener/push_notifications_subscribe_task.h	2011-09-27 16:55:03.189004069 -0400
@@ -25,7 +25,7 @@ class PushNotificationsSubscribeTask : p
      virtual void OnSubscriptionError() = 0;
   };
 
-  PushNotificationsSubscribeTask(TaskParent* parent,
+  PushNotificationsSubscribeTask(buzz::XmppTaskParentInterface* parent,
       const SubscriptionList& subscriptions,
       Delegate* delegate);
   virtual ~PushNotificationsSubscribeTask();
