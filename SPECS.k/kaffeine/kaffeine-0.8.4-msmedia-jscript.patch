diff -u -r kaffeine-0.8.4svn20070314.orig/kaffeine/src/player-parts/xine-part/kxinewidget.cpp kaffeine-0.8.4svn20070314/kaffeine/src/player-parts/xine-part/kxinewidget.cpp
--- kaffeine-0.8.4svn20070314.orig/kaffeine/src/player-parts/xine-part/kxinewidget.cpp	2007-03-17 09:12:10.000000000 +0800
+++ kaffeine-0.8.4svn20070314/kaffeine/src/player-parts/xine-part/kxinewidget.cpp	2007-03-17 09:12:36.000000000 +0800
@@ -1069,7 +1069,7 @@
 	}
 }
 
-bool KXineWidget::initXine()
+bool KXineWidget::initXine(bool play)
 {
 	if (isXineReady())
 		return true;
@@ -1330,7 +1330,7 @@
 	emit signalXineReady();
 
 	/** something to play? **/
-	slotPlay();
+	slotPlay(play);
 
 	return true;
 }
@@ -1859,7 +1859,7 @@
 	m_posTimer.start(1000);
 }
 
-void KXineWidget::slotPlay()
+void KXineWidget::slotPlay(bool play)
 {
 	if ((!isXineReady()) || (isQueueEmpty()))
 		return;
@@ -1951,6 +1951,7 @@
 	/*** play ***/
 	int savedPos = m_savedPos;
 	m_savedPos = 0;
+	if(play)
 	if (!xine_play(m_xineStream, savedPos, 0))
 	{
 		sendXineError();
@@ -2313,6 +2314,41 @@
 #endif
 }
 
+int  KXineWidget::slotDuration()
+{      
+    int pos, time, length; 
+       
+       int t = 0, ret = 0; 
+       while(((ret = xine_get_pos_length(m_xineStream, &pos, &time, &length)) == 0) && (++t < 5))
+               xine_usec_sleep(100000);
+
+       if ( (ret != 0) && (length > 0) )
+       {
+               return length;
+       }
+
+       return 0;
+}
+
+int  KXineWidget::slotPosition()
+{ 
+       if (!m_xineReady) return 0;
+       
+       int pos, time, length;
+       
+       int t = 0, ret = 0;
+       while(((ret = xine_get_pos_length(m_xineStream, &pos, &time, &length)) == 0) && (++t < 5))
+               xine_usec_sleep(100000);
+       
+       if ( ret == 0 )
+       {
+               debugOut("No valid stream position information");
+               return 0;
+       }
+       
+       return (uint)time;
+}
+
 void KXineWidget::slotDeleteVideoFilter(PostFilter* filter)
 {
 #ifndef USE_QT_ONLY
@@ -2636,6 +2672,17 @@
 	}
 }
 
+int KXineWidget::slotMuteState()
+{
+    int muteParam;
+       if (m_softwareMixer)
+               muteParam = XINE_PARAM_AUDIO_AMP_MUTE;
+       else
+               muteParam = XINE_PARAM_AUDIO_MUTE;
+
+       return xine_get_param(m_xineStream, muteParam);
+}
+
 bool KXineWidget::SoftwareMixing() const
 {
 	if (m_softwareMixer)
Only in kaffeine-0.8.4svn20070314/kaffeine/src/player-parts/xine-part: kxinewidget.cpp.orig
diff -u -r kaffeine-0.8.4svn20070314.orig/kaffeine/src/player-parts/xine-part/kxinewidget.h kaffeine-0.8.4svn20070314/kaffeine/src/player-parts/xine-part/kxinewidget.h
--- kaffeine-0.8.4svn20070314.orig/kaffeine/src/player-parts/xine-part/kxinewidget.h	2007-03-17 09:12:10.000000000 +0800
+++ kaffeine-0.8.4svn20070314/kaffeine/src/player-parts/xine-part/kxinewidget.h	2007-03-17 09:12:36.000000000 +0800
@@ -84,7 +84,7 @@
 
 	enum Speed { Normal = 0, Pause, Fast1, Fast2, Slow1, Slow2, Undefined };
 
-	bool initXine(); /* call this only if you set startManual = true in the constructor */
+	bool initXine(bool play=true); /* call this only if you set startManual = true in the constructor */
 	bool isXineReady() const { return m_xineReady; }
 	bool isPlaying() const;
 	Speed getSpeed() const { return m_currentSpeed; }
@@ -213,11 +213,12 @@
 public slots:
 	virtual void polish();
 
-	void slotPlay();
+	void slotPlay(bool play=true);
 	void slotStop();
 
 	void slotSetVolume(int);
 	void slotToggleMute();
+	int  slotMuteState();	
 	void slotSpeedPause();
 	void slotSpeedNormal();
 	void slotSpeedFaster();
@@ -295,6 +296,8 @@
 	void slotDeleteAudioFilter(PostFilter* filter);
 	void slotRemoveAllVideoFilters();
 	void slotRemoveAllAudioFilters();
+	int  slotDuration();
+	int  slotPosition();
 
 protected slots:
 	void slotSendPosition();
Only in kaffeine-0.8.4svn20070314/kaffeine/src/player-parts/xine-part: kxinewidget.h.orig
diff -u -r kaffeine-0.8.4svn20070314.orig/kaffeine/src/player-parts/xine-part/xine_part.cpp kaffeine-0.8.4svn20070314/kaffeine/src/player-parts/xine-part/xine_part.cpp
--- kaffeine-0.8.4svn20070314.orig/kaffeine/src/player-parts/xine-part/xine_part.cpp	2007-03-17 09:12:10.000000000 +0800
+++ kaffeine-0.8.4svn20070314/kaffeine/src/player-parts/xine-part/xine_part.cpp	2007-03-17 09:12:36.000000000 +0800
@@ -70,7 +70,7 @@
 		: DCOPObject("XinePartIface"),
 		KaffeinePart(parent, name ? name : "XinePart"),
 		m_current(0), m_xine(NULL), m_pictureSettings(NULL), m_deinterlacerConfigWidget(NULL),
-		m_filterDialog(NULL), m_embeddedContext(NULL)
+		m_filterDialog(NULL), m_embeddedContext(NULL), m_liveConnect(new XinePartLiveConnectExtension(this))
 {
 	kdDebug() << "XinePart: Creating new XinePart..." << endl;
 
@@ -271,7 +271,7 @@
 	return true;
 }
 
-void XinePart::slotPlay(bool forcePlay)
+void XinePart::slotPlay(bool play, bool forcePlay)
 {
 	kdDebug() << "XinePart::slotPlay()" << endl;
 
@@ -310,7 +310,7 @@
 		m_xine->appendToQueue(mrl.url() + sub );
 		if (!m_xine->isXineReady())
 		{
-			if (!m_xine->initXine())
+			if (!m_xine->initXine(play))
 				return;
 		}
 		else
@@ -327,7 +327,7 @@
 			m_xine->appendToQueue(localFile);
 			if (!m_xine->isXineReady())
 			{
-				if (!m_xine->initXine())
+				if (!m_xine->initXine(play))
 					return;
 			}
 			else
@@ -478,6 +478,14 @@
 	m_xine->slotToggleMute();
 }
 
+int XinePart::slotMuteState()
+{      
+       if (!m_xine->isXineReady())
+               return 1;
+       
+       return m_xine->slotMuteState();
+}
+
 void XinePart::slotVolumeUp()
 {
 	int newVol = volume() + 5;
@@ -562,6 +570,21 @@
 	m_xine->slotSetSpuOffset(spuOffset-45000);
 }
 
+int  XinePart::slotDuration()
+{
+    return m_xine->slotDuration();
+}
+
+int  XinePart::slotCurPosition(int pos)
+{
+    if (pos == -1) {
+        return m_xine->slotPosition();
+    } else {
+        m_xine->slotSeekToPosition(pos);
+        return pos;
+    }
+}
+
 void XinePart::slotSaveStream()
 {
 	if (m_mrl.isEmpty())
@@ -2025,3 +2048,133 @@
 }*/
 
 #include "xine_part.moc"
+XinePartLiveConnectExtension::XinePartLiveConnectExtension(XinePart * parent)
+: KParts::LiveConnectExtension (parent, "XinePart LiveConnect Extension"), m_parent (parent)
+{}
+
+bool XinePartLiveConnectExtension::get (
+        const unsigned long objid, const QString & name,
+        KParts::LiveConnectExtension::Type & type,
+        unsigned long & rid, QString & value)
+{
+    kdDebug(6074) << "XinePartLiveConnectExtension::get"
+        << " objid:" << objid
+        << " name :" << name 
+        << " type :" << type 
+        << " rid  :" << rid
+        << " value:" << value
+        << endl;
+    QString data = name.lower();
+    if (data == "play" || data == "stop" || data == "pause") {
+        type = LiveConnectExtension::TypeFunction;
+        rid = LiveConnectExtension::TypeVoid;
+        value = "";
+        return true;
+    } else if (data == "mute") {
+        type = LiveConnectExtension::TypeBool;
+        value = QString::number(m_parent->slotMuteState());
+        return true;
+    } else if (data == "duration") {
+        type = LiveConnectExtension::TypeNumber;
+        value = QString::number(m_parent->slotDuration());
+        return true;
+    } else if (data == "currentposition") {
+        type = LiveConnectExtension::TypeNumber;
+        value = QString::number(m_parent->slotCurPosition());
+        return true;
+    } else if (data == "playstate") {
+        type = LiveConnectExtension::TypeNumber;
+        if (m_parent->isPlaying()) {
+            value = QString::number(2);
+        } else if (m_parent->isPaused()) {
+            value = QString::number(1);
+        } else {
+            value = QString::number(0);
+        }
+        return true;
+    }
+    return false;
+}
+
+bool XinePartLiveConnectExtension::put(
+    const unsigned long objid, 
+    const QString & name, const QString & value)
+{
+
+    kdDebug(6074) << "XinePartLiveConnectExtension::put"
+        << " objid:" << objid
+        << " name :" << name 
+        << " value:" << value
+        << endl;
+    QString data = name.lower();
+    if (data == "mute") {
+        bool val = (value.lower() == "true");
+        if (val != m_parent->slotMuteState()) {
+            m_parent->slotMute();
+        }
+    } else if (data == "currentposition") {
+        bool ok;
+        double pos = value.toDouble(&ok);
+        int len = m_parent->slotDuration();
+        if (len <= 0) {
+            return false;
+        }
+        pos = pos * 65535 / len;
+        if (!ok || pos < 0) {
+            return false;
+        }
+        m_parent->slotCurPosition((int)pos);
+    } else if (data == "filename") {
+        m_parent->slotStop();
+        if (!m_parent->openURL(MRL(value)))
+            return false;
+    }
+    return true;
+}
+
+bool XinePartLiveConnectExtension::call( 
+    const unsigned long objid, const QString & func, 
+    const QStringList & fargs, KParts::LiveConnectExtension::Type & type, 
+    unsigned long & rid, QString & value )
+{
+
+    kdDebug(6074) << "XinePartLiveConnectExtension::call"
+        << " objid:" << objid
+        << " func :" << func 
+        << " type :" << type 
+        << " rid  :" << rid
+        << " value:" << value
+        << endl;
+    kdDebug(6074) << "args:" << endl;
+    for (unsigned int i = 0; i < fargs.count() ; ++i) {
+        kdDebug(6074) << fargs[i] << endl;
+    }
+    kdDebug(6074) << endl;
+
+    QString action = func.lower();
+    if (action == "play") {
+        if (m_parent->isPaused()) {
+            m_parent->slotTogglePause();
+        } else
+             m_parent->slotPlay();
+    } else if (action == "stop") {
+        m_parent->slotStop();
+    } else if (action == "pause") {
+        if (!m_parent->isPaused()) {
+            m_parent->slotTogglePause();
+        }
+    } else
+        return false;
+
+    return true;
+}
+
+void XinePartLiveConnectExtension::unregister(const unsigned long objid)
+{
+    kdDebug(6074) << "XinePartLiveConnectExtension::unregister"
+        << " objid:" << objid
+        << endl;
+}
+
+
+
Only in kaffeine-0.8.4svn20070314/kaffeine/src/player-parts/xine-part: xine_part.cpp.orig
Only in kaffeine-0.8.4svn20070314/kaffeine/src/player-parts/xine-part: xine_part.cpp.rej
diff -u -r kaffeine-0.8.4svn20070314.orig/kaffeine/src/player-parts/xine-part/xine_part.h kaffeine-0.8.4svn20070314/kaffeine/src/player-parts/xine-part/xine_part.h
--- kaffeine-0.8.4svn20070314.orig/kaffeine/src/player-parts/xine-part/xine_part.h	2007-03-17 09:12:10.000000000 +0800
+++ kaffeine-0.8.4svn20070314/kaffeine/src/player-parts/xine-part/xine_part.h	2007-03-17 09:12:36.000000000 +0800
@@ -47,6 +47,7 @@
 class PositionSlider;
 class KProgressDialog;
 class KPopupMenu;
+class XinePartLiveConnectExtension;
 
 /**
  * Kaffeine Part - xine based player part
@@ -112,13 +113,14 @@
 	 */
 	bool openURL(const MRL& mrl);
 	void slotPrepareForFullscreen(bool);
-	void slotPlay(bool forcePlay=false);
+	void slotPlay(bool play=true,bool forcePlay=false);
 	void slotTogglePause(bool pauseLive=true);
 	void slotSetVolume(uint); /* percent */
 	void slotSetPosition(uint); /* percent */
 	void slotSyncVolume();
 	void slotStop();
 	void slotMute(); /* toggle mute */
+	int  slotMuteState();
 
 	void slotVolumeUp();
 	void slotVolumeDown();
@@ -129,6 +131,8 @@
 	void slotPosPlusLarge();
 	void slotPosMinusLarge();
 	void slotJumpIncrement(int);
+        int  slotDuration();
+        int  slotCurPosition(int pos = -1);
 	void slotDelaySubTitle();
 	void slotAdvanceSubTitle();
 
@@ -246,6 +250,8 @@
 	void stopDvb();
 	void playerPause();
 	void dvbOSDHide();
+private:
+        XinePartLiveConnectExtension* m_liveConnect;
 };
 
 
@@ -265,4 +271,20 @@
 	//bool eventFilter(QObject *obj, QEvent *ev);
 };
 
+#include <kparts/browserextension.h>
+
+class XinePartLiveConnectExtension : public KParts::LiveConnectExtension {
+     Q_OBJECT
+public:
+     XinePartLiveConnectExtension(XinePart * parent);
+     bool get (const unsigned long objid, const QString & field, KParts::LiveConnectExtension::Type & type, unsigned long & retobjid
+, QString & value);
+    bool put(const unsigned long, const QString & field, const QString & value);
+    bool call (const unsigned long , const QString & func, const QStringList & args, KParts::LiveConnectExtension::Type & type, unsigned long & retobjid, QString & value);
+    void unregister (const unsigned long objid);
+
+private:
+    XinePart * m_parent;
+};
+
 #endif /* XINEPART_H */
Only in kaffeine-0.8.4svn20070314/kaffeine/src/player-parts/xine-part: xine_part.h.orig
