Index: libeva.cpp
===================================================================
--- libeva.cpp	(revision 926625)
+++ libeva.cpp	(working copy)
@@ -6,30 +6,36 @@
 #include <time.h>
 
 namespace Eva {
+	// a lot of nothing + MD5 of QQ.exe + number of QQ processes
 	static const uchar login_16_51 [] = {
 		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
 		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
-		0x00, 0x00, 0x00, 0x29, 0xc0, 0xf8, 0xc4, 0xbe, 
-		0x3b, 0xee, 0x57, 0x92, 0xd2, 0x42, 0xa6, 0xbe, 
-		0x41, 0x98, 0x97, 0xb4 };
-	static const uchar login_53_68 []= {
-		0xce, 0x11, 0xd5, 0xd9, 0x97, 0x46, 0xac, 0x41, 
-		0xa5, 0x01, 0xb2, 0xf5, 0xe9, 0x62, 0x8e, 0x07 };
+		0x00, 0x00, 0x00, 0x41, 0xd1, 0x18, 0xac, 0x14,
+		0x78, 0x58, 0xf1, 0xd0, 0x81, 0x4d, 0x7d, 0x7d,  
+		0x7b, 0xd9, 0x1f, 0x01 };
 
-	static const uchar login_94_193 []= {
-		0x01, 0x40, 0x01, 0xb6, 0xfb, 0x54, 0x6e, 0x00, 
-		0x10, 0x33, 0x11, 0xa3, 0xab, 0x86, 0x86, 0xff,
-		0x5b, 0x90, 0x5c, 0x74, 0x5d, 0xf1, 0x47, 0xbf,
-		0xcf, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
-		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
-		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
-		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
-		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
-		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
-		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
-		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
-		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
-		0x00, 0x00, 0x00, 0x00 };
+	static const uchar login_53_76 []= {
+		0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00,
+		0x00, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
+		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
+
+	// UUID
+	static const uchar login_77_92 []= {
+		0x00, 0xe3, 0xae, 0x4c, 0xd4, 0xff, 0x4b, 0x88,
+		0x42, 0xb5, 0x66, 0xc5, 0x3a, 0x0d, 0xb6, 0x6f };
+
+	static const uchar login_append_0_72 []= {
+		0x40, 0x01, 0x01, 0x2e, 0x2c, 0x69,  0xb4, 0x00, 
+		0x10, 0x6b, 0xc3, 0xe9, 0x92, 0xc3,  0x50, 0x7a, 
+		0x3a, 0x77, 0x4d, 0xad, 0x69, 0x0c,  0x04, 0xc3, 
+		0x5f, 0x00, 0x00, 0x00, 0x00, 0x00,  0x01, 0x00, 
+		0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  0x00, 0x00, 
+		0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  0x00, 0x00,
+		0x00, 0x00, 0x02, 0xc5, 0x17, 0xea,  0x05, 0x00,
+		0x10, 0x5d, 0xef, 0x8a, 0xfe, 0xe6,  0x10, 0x37,
+		0xf8, 0xff, 0xcc, 0x52, 0x58, 0x62,  0x42, 0xa0, 
+		0x91 };
+
 	static const uchar init_key[] = {
 		0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01,
 		0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01 };
@@ -247,10 +253,11 @@
 		login += Packet::encrypt( nil, key );
 		login.append( login_16_51, 36 );
 		login += loginMode;
-		login.append( login_53_68, 16 );
-		login += (char) (token.size());
+		login.append( login_53_76, 24 );
+		login.append( login_77_92, 16 );
+		login += (unsigned short) (token.size());
 		login += token;
-		login.append( login_94_193, 100 );
+		login.append( login_append_0_72, 73 );
 		memset( login.data()+login.size(), 0, login.capacity()-login.size() );
 		login.setSize( login.capacity() );
 
Index: libeva.h
===================================================================
--- libeva.h	(revision 926625)
+++ libeva.h	(working copy)
@@ -26,7 +26,7 @@
 	typedef unsigned int uint;
 
 	// magic number 
-	static const ushort Version = 0x0F15;
+	static const ushort Version = 0x0F5F;
 	static const uchar Head = 0x02;
 	static const uchar Tail = 0x03;
 
@@ -84,6 +84,7 @@
 	static const uchar LoginRedirect = 0x01;
 	static const uchar LoginWrongPassword = 0x05;
 	static const uchar LoginMiscError = 0x06;
+	static const uchar LoginRedirectEx = 0x0a;
 	static const uchar ChangeStatusOK= 0x30;
 	static const uchar RequestKeyOK = 0x00;
 
@@ -113,7 +114,7 @@
 	static const uint MaxPacketLength = 65535;
 	static const uint HeaderLength = 13;
 	static const uint KeyLength = 16;
-	static const uint LoginLength = 416;
+	static const uint LoginLength = 449;
 
 	static const char* contactDetailIndex[] =
 	{
@@ -409,6 +410,13 @@
 		static inline ushort redirectedPort( const ByteArray& data ) 
 		{ return ntohs( type_cast<ushort> (data.data()+9) ); }
 
+		static inline uint redirectedExIP( const ByteArray& data ) 
+		{ return ntohl( type_cast<uint> (data.data()+15) ); }
+
+		// for now it's just 80 (TCP) until we know what is the real port
+		static inline ushort redirectedExPort( const ByteArray& data ) 
+		{ return 80; }
+
 		static inline ByteArray sessionKey( const ByteArray& data ) 
 		{ return ByteArray::duplicate( data.data()+1, KeyLength ); }
 
@@ -438,10 +446,10 @@
 		{ return ntohl( type_cast<uint> (data.data()+33) ); }
 
 		static inline uint lastLoginFrom( const ByteArray& data ) 
-		{ return ntohl( type_cast<uint> (data.data()+123) ); }
+		{ return ntohl( type_cast<uint> (data.data()+127) ); }
 
 		static inline uint lastLoginTime( const ByteArray& data ) 
-		{ return ntohl( type_cast<uint> (data.data()+127) ); }
+		{ return ntohl( type_cast<uint> (data.data()+131) ); }
 
 		static inline uint nextGroupId( const ByteArray& data ) 
 		{ return ntohl( type_cast<uint> (data.data()+6) ); }
Index: qqnotifysocket.cpp
===================================================================
--- qqnotifysocket.cpp	(revision 926625)
+++ qqnotifysocket.cpp	(working copy)
@@ -114,7 +114,7 @@
 	Eva::ByteArray initKey((char*) Eva::Packet::getInitKey(), 16 );
 	initKey.release();
 
-	kDebug( 14140 ) << "command = " << packet.command();
+	kDebug( 14140 ) << "command = 0x" << hex << packet.command();
 	switch( packet.command() )
 	{
 		case Eva::Command::RequestLoginToken :
@@ -315,6 +315,14 @@
 					connect( QHostAddress( Eva::Packet::redirectedIP(text) ).toString(), Eva::Packet::redirectedPort(text) );
 					break;
 
+				case Eva::LoginRedirectEx :
+					kDebug( 14140 ) << "Redirect to " 
+						<< QHostAddress(Eva::Packet::redirectedExIP(text)).toString()
+						<< " : " << Eva::Packet::redirectedExPort(text) << endl;
+					disconnect();
+					connect( QHostAddress( Eva::Packet::redirectedExIP(text) ).toString(), Eva::Packet::redirectedExPort(text) );
+					break;
+
 				case Eva::LoginWrongPassword :
 					kDebug( 14140 )  << "password is wrong. ";
 					break;
@@ -324,6 +332,8 @@
 					break;
 
 				default:
+					kDebug( 14140 ) << "unknown reply code: 0x" << hex 
+							<< Eva::Packet::replyCode(text);
 					kDebug( 14140 ) << "Bad, we are not supposed to be here !";
 					break;
 			}
