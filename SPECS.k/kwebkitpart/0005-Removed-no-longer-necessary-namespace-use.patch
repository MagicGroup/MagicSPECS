From 1ef0faa649799fcc03e2ee5e4e3d401208894f3b Mon Sep 17 00:00:00 2001
From: Dawit Alemayehu <adawit@kde.org>
Date: Thu, 27 Sep 2012 01:11:44 -0400
Subject: [PATCH 5/7] - Removed no longer necessary namespace use. - Make sure
 the curent focus widget is restored when closing the
 searchbar. - Removed no longer necessary #include
 statements.

---
 src/kwebkitpart.cpp    |   4 +-
 src/kwebkitpart.h      |  11 ++---
 src/ui/passwordbar.cpp |   3 --
 src/ui/passwordbar.h   |   2 -
 src/ui/searchbar.cpp   | 130 +++++++++++++++++++++++--------------------------
 src/ui/searchbar.h     |  11 ++---
 src/ui/searchbar.ui    |   2 +-
 7 files changed, 71 insertions(+), 92 deletions(-)

diff --git a/src/kwebkitpart.cpp b/src/kwebkitpart.cpp
index dd15bbe..282f179 100644
--- a/src/kwebkitpart.cpp
+++ b/src/kwebkitpart.cpp
@@ -749,7 +749,7 @@ void KWebKitPart::slotShowSearchBar()
 {
     if (!m_searchBar) {
         // Create the search bar...
-        m_searchBar = new KDEPrivate::SearchBar(widget());
+        m_searchBar = new SearchBar(widget());
         connect(m_searchBar, SIGNAL(searchTextChanged(QString,bool)),
                 this, SLOT(slotSearchForText(QString,bool)));
 
@@ -887,7 +887,7 @@ void KWebKitPart::slotSaveFormDataRequested (const QString& key, const QUrl& url
         return;
 
     if (!m_passwordBar) {
-        m_passwordBar = new KDEPrivate::PasswordBar(widget());
+        m_passwordBar = new PasswordBar(widget());
         KWebWallet* wallet = page()->wallet();
         if (!wallet) {
             kWarning() << "No wallet instance found! This should never happen!";
diff --git a/src/kwebkitpart.h b/src/kwebkitpart.h
index 8231b24..ffcb1ab 100644
--- a/src/kwebkitpart.h
+++ b/src/kwebkitpart.h
@@ -29,16 +29,13 @@ namespace KParts {
   class StatusBarExtension;
 }
 
-namespace KDEPrivate {
-  class PasswordBar;
-  class SearchBar;
-}
-
 class QWebView;
 class QWebFrame;
 class QWebHistoryItem;
 class WebView;
 class WebPage;
+class SearchBar;
+class PasswordBar;
 class KUrlLabel;
 class WebKitBrowserExtension;
 
@@ -151,8 +148,8 @@ private:
     bool m_hasCachedFormData;
     bool m_doLoadFinishedActions;
     KUrlLabel* m_statusBarWalletLabel;
-    KDEPrivate::SearchBar* m_searchBar;
-    KDEPrivate::PasswordBar* m_passwordBar;
+    SearchBar* m_searchBar;
+    PasswordBar* m_passwordBar;
     WebKitBrowserExtension* m_browserExtension;
     KParts::StatusBarExtension* m_statusBarExtension;
     WebView* m_webView;
diff --git a/src/ui/passwordbar.cpp b/src/ui/passwordbar.cpp
index f25f0a5..178379c 100644
--- a/src/ui/passwordbar.cpp
+++ b/src/ui/passwordbar.cpp
@@ -32,7 +32,6 @@
 #include <QAction>
 #include <QPalette>
 
-namespace KDEPrivate {
 
 PasswordBar::PasswordBar(QWidget *parent)
             :KMessageWidget(parent)
@@ -105,6 +104,4 @@ void PasswordBar::clear()
     m_url.clear();
 }
 
-}
-
 #include "passwordbar.moc"
diff --git a/src/ui/passwordbar.h b/src/ui/passwordbar.h
index 48bbb09..0e64c53 100644
--- a/src/ui/passwordbar.h
+++ b/src/ui/passwordbar.h
@@ -26,7 +26,6 @@
 
 #include <QUrl>
 
-namespace KDEPrivate {
 
 class PasswordBar : public KMessageWidget
 {
@@ -58,5 +57,4 @@ private:
     QString m_requestKey;
 };
 
-}
 #endif // PASSWORDBAR_H
diff --git a/src/ui/searchbar.cpp b/src/ui/searchbar.cpp
index 2f33982..4efed95 100644
--- a/src/ui/searchbar.cpp
+++ b/src/ui/searchbar.cpp
@@ -24,56 +24,46 @@
  */
 
 #include "searchbar.h"
-#include "ui_searchbar.h"
 
 #include <KDE/KLineEdit>
 #include <KDE/KColorScheme>
-#include <KDE/KDebug>
 #include <KDE/KIcon>
 #include <KDE/KLocalizedString>
 
 #include <QResizeEvent>
-#include <QShortcut>
 
 
-namespace KDEPrivate {
-
-
-class SearchBar::SearchBarPrivate
-{
-public:
-    void init (SearchBar* searchBar)
-    {
-        ui.setupUi(searchBar);
-        ui.optionsButton->addAction(ui.actionMatchCase);
-        ui.optionsButton->addAction(ui.actionHighlightMatch);
-        ui.optionsButton->addAction(ui.actionSearchAutomatically);
-        ui.closeButton->setIcon(KIcon("dialog-close"));
-        ui.previousButton->setIcon(KIcon("go-up-search"));
-        ui.nextButton->setIcon(KIcon("go-down-search"));
-        ui.previousButton->setToolButtonStyle(Qt::ToolButtonTextBesideIcon);
-        ui.nextButton->setToolButtonStyle(Qt::ToolButtonTextBesideIcon);
-        ui.searchInfo->setText(i18nc("label for input line to find text", "&Find:"));
-
-        connect(ui.nextButton, SIGNAL(clicked()),
-                searchBar, SLOT(findNext()));
-        connect(ui.previousButton, SIGNAL(clicked()),
-                searchBar, SLOT(findPrevious()));
-        connect(ui.searchComboBox, SIGNAL(returnPressed()),
-                searchBar, SLOT(findNext()));
-        connect(ui.searchComboBox, SIGNAL(editTextChanged(QString)),
-                searchBar, SLOT(textChanged(QString)));
-    }
-
-    Ui::SearchBar ui;
-};
-
 SearchBar::SearchBar(QWidget *parent)
-          :QWidget(parent), d (new SearchBarPrivate)
+    :QWidget(parent)
 {
 
+    // Get the widget that currently has the focus so we can properly
+    // restore it when the filter bar is closed.
+    QWidget* widgetWindow = (parent ? parent->window() : 0);
+    m_focusWidget = (widgetWindow ? widgetWindow->focusWidget() : 0);
+
     // Initialize the user interface...
-    d->init(this);
+    m_ui.setupUi(this);
+    m_ui.optionsButton->addAction(m_ui.actionMatchCase);
+    m_ui.optionsButton->addAction(m_ui.actionHighlightMatch);
+    m_ui.optionsButton->addAction(m_ui.actionSearchAutomatically);
+    m_ui.closeButton->setIcon(KIcon("dialog-close"));
+    m_ui.previousButton->setIcon(KIcon("go-up-search"));
+    m_ui.nextButton->setIcon(KIcon("go-down-search"));
+    m_ui.previousButton->setToolButtonStyle(Qt::ToolButtonTextBesideIcon);
+    m_ui.nextButton->setToolButtonStyle(Qt::ToolButtonTextBesideIcon);
+    m_ui.searchInfo->setText(i18nc("label for input line to find text", "&Find:"));
+
+    setFocusProxy(m_ui.searchComboBox);
+    
+    connect(m_ui.nextButton, SIGNAL(clicked()),
+            this, SLOT(findNext()));
+    connect(m_ui.previousButton, SIGNAL(clicked()),
+            this, SLOT(findPrevious()));
+    connect(m_ui.searchComboBox, SIGNAL(returnPressed()),
+            this, SLOT(findNext()));
+    connect(m_ui.searchComboBox, SIGNAL(editTextChanged(QString)),
+            this, SLOT(textChanged(QString)));
 
     // Start off hidden by default...
     setVisible(false);
@@ -83,22 +73,21 @@ SearchBar::~SearchBar()
 {
     // NOTE: For some reason, if we do not clear the focus from the line edit
     // widget before we delete this object, it seems to cause a crash!!
-    d->ui.searchComboBox->clearFocus();
-    delete d;
+    m_ui.searchComboBox->clearFocus();
 }
 
 void SearchBar::clear()
 {
-    d->ui.searchComboBox->clear();
+    m_ui.searchComboBox->clear();
 }
 
 void SearchBar::setVisible (bool visible)
 {
     if (visible) {
-        d->ui.searchComboBox->setFocus( Qt::ActiveWindowFocusReason );
-        d->ui.searchComboBox->lineEdit()->selectAll();
+        m_ui.searchComboBox->setFocus(Qt::ActiveWindowFocusReason);
+        m_ui.searchComboBox->lineEdit()->selectAll();
     } else {
-        d->ui.searchComboBox->setPalette(QPalette());
+        m_ui.searchComboBox->setPalette(QPalette());
         emit searchTextChanged(QString());
     }
 
@@ -107,37 +96,37 @@ void SearchBar::setVisible (bool visible)
 
 QString SearchBar::searchText() const
 {
-    return d->ui.searchComboBox->currentText();
+    return m_ui.searchComboBox->currentText();
 }
 
 bool SearchBar::caseSensitive() const
 {
-    return d->ui.actionMatchCase->isChecked();
+    return m_ui.actionMatchCase->isChecked();
 }
 
 bool SearchBar::highlightMatches() const
 {
-    return d->ui.actionHighlightMatch->isChecked();
+    return m_ui.actionHighlightMatch->isChecked();
 }
 
 void SearchBar::setSearchText(const QString& text)
 {
     show();
-    d->ui.searchComboBox->setEditText(text);
+    m_ui.searchComboBox->setEditText(text);
 }
 
 void SearchBar::setFoundMatch(bool match)
 {
     //kDebug() << match;
-    if (d->ui.searchComboBox->currentText().isEmpty()) {
-        d->ui.searchComboBox->setPalette(QPalette());
+    if (m_ui.searchComboBox->currentText().isEmpty()) {
+        m_ui.searchComboBox->setPalette(QPalette());
         return;
     }
 
     KColorScheme::BackgroundRole role = (match ? KColorScheme::PositiveBackground : KColorScheme::NegativeBackground);
-    QPalette newPal( d->ui.searchComboBox->palette() );
-    KColorScheme::adjustBackground(newPal, role );
-    d->ui.searchComboBox->setPalette(newPal);
+    QPalette newPal(m_ui.searchComboBox->palette());
+    KColorScheme::adjustBackground(newPal, role);
+    m_ui.searchComboBox->setPalette(newPal);
 }
 
 void SearchBar::findNext()
@@ -145,9 +134,9 @@ void SearchBar::findNext()
     if (!isVisible())
         return;
 
-    const QString text (d->ui.searchComboBox->currentText());
-    if (d->ui.searchComboBox->findText(text) == -1) {
-        d->ui.searchComboBox->addItem(text);
+    const QString text (m_ui.searchComboBox->currentText());
+    if (m_ui.searchComboBox->findText(text) == -1) {
+        m_ui.searchComboBox->addItem(text);
     }
 
     emit searchTextChanged(text);
@@ -158,27 +147,27 @@ void SearchBar::findPrevious()
     if (!isVisible())
         return;
 
-    const QString text (d->ui.searchComboBox->currentText());
-    if (d->ui.searchComboBox->findText(text) == -1) {
-        d->ui.searchComboBox->addItem(text);
+    const QString text (m_ui.searchComboBox->currentText());
+    if (m_ui.searchComboBox->findText(text) == -1) {
+        m_ui.searchComboBox->addItem(text);
     }
 
-    emit searchTextChanged(d->ui.searchComboBox->currentText(), true);
+    emit searchTextChanged(m_ui.searchComboBox->currentText(), true);
 }
 
 void SearchBar::textChanged(const QString &text)
 {
     if (text.isEmpty()) {
-        d->ui.searchComboBox->setPalette(QPalette());
-        d->ui.nextButton->setEnabled(false);
-        d->ui.previousButton->setEnabled(false);
+        m_ui.searchComboBox->setPalette(QPalette());
+        m_ui.nextButton->setEnabled(false);
+        m_ui.previousButton->setEnabled(false);
     } else {
-        d->ui.nextButton->setEnabled(true);
-        d->ui.previousButton->setEnabled(true);
+        m_ui.nextButton->setEnabled(true);
+        m_ui.previousButton->setEnabled(true);
     }
 
-    if (d->ui.actionSearchAutomatically->isChecked()) {
-        emit searchTextChanged(d->ui.searchComboBox->currentText());
+    if (m_ui.actionSearchAutomatically->isChecked()) {
+        emit searchTextChanged(m_ui.searchComboBox->currentText());
     }
 }
 
@@ -191,14 +180,15 @@ bool SearchBar::event(QEvent* e)
         QKeyEvent* kev = static_cast<QKeyEvent*>(e);
         if (kev->key() == Qt::Key_Escape) {
             e->accept();
-            clearFocus();
-            setVisible(false);
+            close();
+            if (m_focusWidget) {
+                m_focusWidget->setFocus();
+                m_focusWidget = 0;
+            }
             return true;
         }
     }
     return QWidget::event(e);
 }
 
-}
-
 #include "searchbar.moc"
diff --git a/src/ui/searchbar.h b/src/ui/searchbar.h
index 62b0a72..c01acd2 100644
--- a/src/ui/searchbar.h
+++ b/src/ui/searchbar.h
@@ -27,10 +27,10 @@
 
 #include <QWidget>
 
+#include "ui_searchbar.h"
+
 class QEvent;
 
-namespace KDEPrivate {
- 
 /**
  * This is the widget that shows up when the search is initiated.
  */
@@ -61,11 +61,8 @@ Q_SIGNALS:
     void searchTextChanged(const QString& text, bool backward = false);
 
 private:
-    class SearchBarPrivate;
-    SearchBarPrivate * const d;
-
+    Ui::SearchBar m_ui;
+    QPointer<QWidget> m_focusWidget;
 };
 
-}
-
 #endif // SEARCHBAR_P_H
diff --git a/src/ui/searchbar.ui b/src/ui/searchbar.ui
index e57c508..0ed50bd 100644
--- a/src/ui/searchbar.ui
+++ b/src/ui/searchbar.ui
@@ -152,7 +152,7 @@
    <sender>closeButton</sender>
    <signal>clicked()</signal>
    <receiver>SearchBar</receiver>
-   <slot>hide()</slot>
+   <slot>close()</slot>
    <hints>
     <hint type="sourcelabel">
      <x>16</x>
-- 
1.7.12.1

