To: vim_dev@googlegroups.com
Subject: Patch 7.4.195
Fcc: outbox
From: Bram Moolenaar <Bram@moolenaar.net>
Mime-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit
------------

Patch 7.4.195 (after 7.4.193)
Problem:    Python tests fail.
Solution:   Change "then" to "than" in more places. (Dominique Pelle, Taro
	    Muraoka)
Files:	    src/testdir/test86.in, src/testdir/test86.ok,
	    src/testdir/test87.in, src/testdir/test87.ok


*** ../vim-7.4.194/src/testdir/test86.in	2014-02-11 18:47:18.678311042 +0100
--- src/testdir/test86.in	2014-03-12 15:20:41.512708977 +0100
***************
*** 675,681 ****
  # Check GCing iterator that was not fully exhausted
  i = iter(vim.buffers)
  cb.append('i:' + str(next(i)))
! # and also check creating more then one iterator at a time
  i2 = iter(vim.buffers)
  cb.append('i2:' + str(next(i2)))
  cb.append('i:' + str(next(i)))
--- 675,681 ----
  # Check GCing iterator that was not fully exhausted
  i = iter(vim.buffers)
  cb.append('i:' + str(next(i)))
! # and also check creating more than one iterator at a time
  i2 = iter(vim.buffers)
  cb.append('i2:' + str(next(i2)))
  cb.append('i:' + str(next(i)))
*** ../vim-7.4.194/src/testdir/test86.ok	2014-01-14 16:54:53.000000000 +0100
--- src/testdir/test86.ok	2014-03-12 15:19:28.080707851 +0100
***************
*** 882,892 ****
  l[:] = FailingIter():NotImplementedError:('iter',)
  l[:] = FailingIterNext():NotImplementedError:('next',)
  <<< Finished
! nel[1:10:2]  = "abcK":ValueError:('attempt to assign sequence of size greater then 2 to extended slice',)
  ('a', 'b', 'c', 'O')
  nel[1:10:2]  = "a":ValueError:('attempt to assign sequence of size 1 to extended slice of size 2',)
  ('a', 'b', 'c', 'O')
! nel[1:1:-1]  = "a":ValueError:('attempt to assign sequence of size greater then 0 to extended slice',)
  ('a', 'b', 'c', 'O')
  nel[:] = FailingIterNextN(2):NotImplementedError:('next N',)
  ('a', 'b', 'c', 'O')
--- 882,892 ----
  l[:] = FailingIter():NotImplementedError:('iter',)
  l[:] = FailingIterNext():NotImplementedError:('next',)
  <<< Finished
! nel[1:10:2]  = "abcK":ValueError:('attempt to assign sequence of size greater than 2 to extended slice',)
  ('a', 'b', 'c', 'O')
  nel[1:10:2]  = "a":ValueError:('attempt to assign sequence of size 1 to extended slice of size 2',)
  ('a', 'b', 'c', 'O')
! nel[1:1:-1]  = "a":ValueError:('attempt to assign sequence of size greater than 0 to extended slice',)
  ('a', 'b', 'c', 'O')
  nel[:] = FailingIterNextN(2):NotImplementedError:('next N',)
  ('a', 'b', 'c', 'O')
***************
*** 1233,1240 ****
  >>> Testing NumberToLong using vim.buffers[%s]
  vim.buffers[[]]:TypeError:('expected int(), long() or something supporting coercing to long(), but got list',)
  vim.buffers[None]:TypeError:('expected int(), long() or something supporting coercing to long(), but got NoneType',)
! vim.buffers[-1]:ValueError:('number must be greater then zero',)
! vim.buffers[0]:ValueError:('number must be greater then zero',)
  <<< Finished
  > Current
  >> CurrentGetattr
--- 1233,1240 ----
  >>> Testing NumberToLong using vim.buffers[%s]
  vim.buffers[[]]:TypeError:('expected int(), long() or something supporting coercing to long(), but got list',)
  vim.buffers[None]:TypeError:('expected int(), long() or something supporting coercing to long(), but got NoneType',)
! vim.buffers[-1]:ValueError:('number must be greater than zero',)
! vim.buffers[0]:ValueError:('number must be greater than zero',)
  <<< Finished
  > Current
  >> CurrentGetattr
*** ../vim-7.4.194/src/testdir/test87.in	2014-02-11 18:47:18.678311042 +0100
--- src/testdir/test87.in	2014-03-12 15:21:20.036709567 +0100
***************
*** 664,670 ****
  # Check GCing iterator that was not fully exhausted
  i = iter(vim.buffers)
  cb.append('i:' + str(next(i)))
! # and also check creating more then one iterator at a time
  i2 = iter(vim.buffers)
  cb.append('i2:' + str(next(i2)))
  cb.append('i:' + str(next(i)))
--- 664,670 ----
  # Check GCing iterator that was not fully exhausted
  i = iter(vim.buffers)
  cb.append('i:' + str(next(i)))
! # and also check creating more than one iterator at a time
  i2 = iter(vim.buffers)
  cb.append('i2:' + str(next(i2)))
  cb.append('i:' + str(next(i)))
*** ../vim-7.4.194/src/testdir/test87.ok	2014-01-14 16:54:53.000000000 +0100
--- src/testdir/test87.ok	2014-03-12 15:19:28.080707851 +0100
***************
*** 882,892 ****
  l[:] = FailingIter():(<class 'NotImplementedError'>, NotImplementedError('iter',))
  l[:] = FailingIterNext():(<class 'NotImplementedError'>, NotImplementedError('next',))
  <<< Finished
! nel[1:10:2]  = "abcK":(<class 'ValueError'>, ValueError('attempt to assign sequence of size greater then 2 to extended slice',))
  (b'a', b'b', b'c', b'O')
  nel[1:10:2]  = "a":(<class 'ValueError'>, ValueError('attempt to assign sequence of size 1 to extended slice of size 2',))
  (b'a', b'b', b'c', b'O')
! nel[1:1:-1]  = "a":(<class 'ValueError'>, ValueError('attempt to assign sequence of size greater then 0 to extended slice',))
  (b'a', b'b', b'c', b'O')
  nel[:] = FailingIterNextN(2):(<class 'NotImplementedError'>, NotImplementedError('next N',))
  (b'a', b'b', b'c', b'O')
--- 882,892 ----
  l[:] = FailingIter():(<class 'NotImplementedError'>, NotImplementedError('iter',))
  l[:] = FailingIterNext():(<class 'NotImplementedError'>, NotImplementedError('next',))
  <<< Finished
! nel[1:10:2]  = "abcK":(<class 'ValueError'>, ValueError('attempt to assign sequence of size greater than 2 to extended slice',))
  (b'a', b'b', b'c', b'O')
  nel[1:10:2]  = "a":(<class 'ValueError'>, ValueError('attempt to assign sequence of size 1 to extended slice of size 2',))
  (b'a', b'b', b'c', b'O')
! nel[1:1:-1]  = "a":(<class 'ValueError'>, ValueError('attempt to assign sequence of size greater than 0 to extended slice',))
  (b'a', b'b', b'c', b'O')
  nel[:] = FailingIterNextN(2):(<class 'NotImplementedError'>, NotImplementedError('next N',))
  (b'a', b'b', b'c', b'O')
***************
*** 1233,1240 ****
  >>> Testing NumberToLong using vim.buffers[%s]
  vim.buffers[[]]:(<class 'TypeError'>, TypeError('expected int() or something supporting coercing to int(), but got list',))
  vim.buffers[None]:(<class 'TypeError'>, TypeError('expected int() or something supporting coercing to int(), but got NoneType',))
! vim.buffers[-1]:(<class 'ValueError'>, ValueError('number must be greater then zero',))
! vim.buffers[0]:(<class 'ValueError'>, ValueError('number must be greater then zero',))
  <<< Finished
  > Current
  >> CurrentGetattr
--- 1233,1240 ----
  >>> Testing NumberToLong using vim.buffers[%s]
  vim.buffers[[]]:(<class 'TypeError'>, TypeError('expected int() or something supporting coercing to int(), but got list',))
  vim.buffers[None]:(<class 'TypeError'>, TypeError('expected int() or something supporting coercing to int(), but got NoneType',))
! vim.buffers[-1]:(<class 'ValueError'>, ValueError('number must be greater than zero',))
! vim.buffers[0]:(<class 'ValueError'>, ValueError('number must be greater than zero',))
  <<< Finished
  > Current
  >> CurrentGetattr
*** ../vim-7.4.194/src/version.c	2014-03-12 14:54:29.920684895 +0100
--- src/version.c	2014-03-12 15:19:20.016707728 +0100
***************
*** 740,741 ****
--- 740,743 ----
  {   /* Add new patch number below this line */
+ /**/
+     195,
  /**/

-- 
Zen Microsystems: we're the om in .commmmmmmmm

 /// Bram Moolenaar -- Bram@Moolenaar.net -- http://www.Moolenaar.net   \\\
///        sponsor Vim, vote for features -- http://www.Vim.org/sponsor/ \\\
\\\  an exciting new programming language -- http://www.Zimbu.org        ///
 \\\            help me help AIDS victims -- http://ICCF-Holland.org    ///
