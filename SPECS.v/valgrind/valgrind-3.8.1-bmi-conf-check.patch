--- valgrind/configure	2012-09-12 20:20:29.868427602 +0200
+++ valgrind/configure	2012-09-13 18:28:42.354382238 +0200
@@ -8389,9 +8389,9 @@
 
   do { unsigned int h, l;
    __asm__ __volatile__(
-      "andn %2, %1, %0" : "=r" (h) : "r" (0x1234567), "r" (0x7654321) ); }
+      "andn %2, %1, %0" : "=r" (h) : "r" (0x1234567), "r" (0x7654321) );
    __asm__ __volatile__(
-      "movl %2, %%edx; mulx %3, %1, %0" : "=r" (h), "=r" (l) : "g" (0x1234567), "g" (0x7654321) : "edx" ); }
+      "movl %2, %%edx; mulx %3, %1, %0" : "=r" (h), "=r" (l) : "g" (0x1234567), "rm" (0x7654321) : "edx" ); }
   while (0)
 
   ;
--- valgrind/configure.in	2012-09-13 14:53:45.826948006 +0200
+++ valgrind/configure.in	2012-09-13 18:28:20.725057751 +0200
@@ -1822,9 +1822,9 @@
 AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[]], [[
   do { unsigned int h, l;
    __asm__ __volatile__(
-      "andn %2, %1, %0" : "=r" (h) : "r" (0x1234567), "r" (0x7654321) ); }
+      "andn %2, %1, %0" : "=r" (h) : "r" (0x1234567), "r" (0x7654321) );
    __asm__ __volatile__(
-      "movl %2, %%edx; mulx %3, %1, %0" : "=r" (h), "=r" (l) : "g" (0x1234567), "g" (0x7654321) : "edx" ); }
+      "movl %2, %%edx; mulx %3, %1, %0" : "=r" (h), "=r" (l) : "g" (0x1234567), "rm" (0x7654321) : "edx" ); }
   while (0)
 ]])], [
 ac_have_as_bmi=yes
