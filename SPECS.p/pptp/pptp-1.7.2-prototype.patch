diff -up pptp-1.7.2/pptp_ctrl.c.prototype pptp-1.7.2/pptp_ctrl.c
--- pptp-1.7.2/pptp_ctrl.c.prototype	2011-12-06 16:41:47.391574067 +0000
+++ pptp-1.7.2/pptp_ctrl.c	2011-12-06 16:41:47.405574074 +0000
@@ -174,7 +174,7 @@ int max_echo_wait = PPTP_TIMEOUT;
 
 /* Local prototypes */
 static void pptp_reset_timer(void);
-static void pptp_handle_timer();
+static void pptp_handle_timer(void);
 /* Write/read as much as we can without blocking. */
 int pptp_write_some(PPTP_CONN * conn);
 int pptp_read_some(PPTP_CONN * conn);
@@ -1059,7 +1059,7 @@ static void pptp_reset_timer(void)
 
 
 /*** Handle keep-alive timer **************************************************/
-static void pptp_handle_timer()
+static void pptp_handle_timer(void)
 {
     int i;
     /* "Keep Alives and Timers, 1": check connection state */
diff -up pptp-1.7.2/pptp_gre.c.prototype pptp-1.7.2/pptp_gre.c
--- pptp-1.7.2/pptp_gre.c.prototype	2011-12-06 16:41:47.392574067 +0000
+++ pptp-1.7.2/pptp_gre.c	2011-12-06 16:45:34.605691678 +0000
@@ -71,7 +71,7 @@ void print_packet(int fd, void *pack, un
 #endif
 
 /*** time_now_usecs ***********************************************************/
-uint64_t time_now_usecs()
+uint64_t time_now_usecs(void)
 {
     struct timeval tv;
     gettimeofday(&tv, NULL);
diff -up pptp-1.7.2/pptp_quirks.c.prototype pptp-1.7.2/pptp_quirks.c
--- pptp-1.7.2/pptp_quirks.c.prototype	2008-05-14 07:33:55.000000000 +0100
+++ pptp-1.7.2/pptp_quirks.c	2011-12-06 16:41:47.405574074 +0000
@@ -30,7 +30,7 @@ int set_quirk_index(int index)
     return -1;
 }
 
-int get_quirk_index()
+int get_quirk_index(void)
 {
     return quirk_index;
 }
diff -up pptp-1.7.2/pptp_quirks.h.prototype pptp-1.7.2/pptp_quirks.h
--- pptp-1.7.2/pptp_quirks.h.prototype	2008-05-14 07:33:55.000000000 +0100
+++ pptp-1.7.2/pptp_quirks.h	2011-12-06 16:41:47.406574074 +0000
@@ -53,7 +53,7 @@ int set_quirk_index(int index);
 
 /* get the global quirk index. return the index on success,
    -1 if no quirk is defined */
-int get_quirk_index();
+int get_quirk_index(void);
 
 
 #endif /* INC_PPTP_QUIRKS_H */
diff -up pptp-1.7.2/pqueue.c.prototype pptp-1.7.2/pqueue.c
--- pptp-1.7.2/pqueue.c.prototype	2011-12-06 16:41:47.392574067 +0000
+++ pptp-1.7.2/pqueue.c	2011-12-06 16:41:47.406574074 +0000
@@ -217,7 +217,7 @@ int pqueue_del (pqueue_t *point) {
 
 
 
-pqueue_t *pqueue_head () {
+pqueue_t *pqueue_head (void) {
   return pq_head;
 }
 
diff -up pptp-1.7.2/pqueue.h.prototype pptp-1.7.2/pqueue.h
--- pptp-1.7.2/pqueue.h.prototype	2011-12-06 16:41:47.392574067 +0000
+++ pptp-1.7.2/pqueue.h	2011-12-06 16:41:47.407574075 +0000
@@ -24,7 +24,7 @@ typedef struct pqueue {
 
 int       pqueue_add  (u_int32_t seq, unsigned char *packet, int packlen);
 int       pqueue_del  (pqueue_t *point);
-pqueue_t *pqueue_head ();
+pqueue_t *pqueue_head (void);
 int       pqueue_expiry_time (pqueue_t *entry);
 
 #endif /* PQUEUE_H */
diff -up pptp-1.7.2/routing.c.prototype pptp-1.7.2/routing.c
--- pptp-1.7.2/routing.c.prototype	2011-12-06 16:41:47.388574065 +0000
+++ pptp-1.7.2/routing.c	2011-12-06 16:41:47.407574075 +0000
@@ -123,7 +123,7 @@ void routing_init(char *ip) {
 #endif /* Solaris */
 }
 
-void routing_start() {
+void routing_start(void) {
 #if defined (__SVR4) && defined (__sun) /* Solaris */
   if ( ! dorouting )
      return;
@@ -153,7 +153,7 @@ void routing_start() {
 #endif /* Solaris */
 }
 
-void routing_end() {
+void routing_end(void) {
 #if defined (__SVR4) && defined (__sun) /* Solaris */
   if ( ! dorouting)
     return;
diff -up pptp-1.7.2/routing.h.prototype pptp-1.7.2/routing.h
--- pptp-1.7.2/routing.h.prototype	2008-05-14 07:33:55.000000000 +0100
+++ pptp-1.7.2/routing.h	2011-12-06 16:41:47.407574075 +0000
@@ -1,3 +1,3 @@
 void routing_init(char *ip);
-void routing_start();
-void routing_end();
+void routing_start(void);
+void routing_end(void);
diff -up pptp-1.7.2/test.c.prototype pptp-1.7.2/test.c
--- pptp-1.7.2/test.c.prototype	2011-12-06 16:41:47.393574067 +0000
+++ pptp-1.7.2/test.c	2011-12-06 16:41:47.408574076 +0000
@@ -171,7 +171,7 @@ static ssize_t write_reordered(int fd, c
   }
 }
 
-struct test_redirections *test_redirections()
+struct test_redirections *test_redirections(void)
 {
   static struct test_redirections *my = NULL;
 
diff -up pptp-1.7.2/test.h.prototype pptp-1.7.2/test.h
--- pptp-1.7.2/test.h.prototype	2008-05-14 07:33:55.000000000 +0100
+++ pptp-1.7.2/test.h	2011-12-06 16:41:47.408574076 +0000
@@ -2,4 +2,4 @@ struct test_redirections {
   ssize_t (*write)(int fd, const void *buf, size_t count);
 };
 
-struct test_redirections *test_redirections();
+struct test_redirections *test_redirections(void);
diff -up pptp-1.7.2/util.c.prototype pptp-1.7.2/util.c
--- pptp-1.7.2/util.c.prototype	2011-12-06 16:41:47.396574070 +0000
+++ pptp-1.7.2/util.c	2011-12-06 16:41:47.409574076 +0000
@@ -87,7 +87,7 @@ int file2fd(const char *path, const char
 static int sigpipe[2];
 
 /* create a signal pipe, returns 0 for success, -1 with errno for failure */
-int sigpipe_create()
+int sigpipe_create(void)
 {
   int rc;
   
@@ -133,20 +133,20 @@ void sigpipe_assign(int signum)
 }
 
 /* return the signal pipe read file descriptor for select(2) */
-int sigpipe_fd()
+int sigpipe_fd(void)
 {
   return sigpipe[0];
 }
 
 /* read and return the pending signal from the pipe */
-int sigpipe_read()
+int sigpipe_read(void)
 {
   int signum;
   read(sigpipe[0], &signum, sizeof(signum));
   return signum;
 }
 
-void sigpipe_close()
+void sigpipe_close(void)
 {
   close(sigpipe[0]);
   close(sigpipe[1]);
diff -up pptp-1.7.2/util.h.prototype pptp-1.7.2/util.h
--- pptp-1.7.2/util.h.prototype	2011-12-06 16:41:47.396574070 +0000
+++ pptp-1.7.2/util.h	2011-12-06 16:41:47.409574076 +0000
@@ -35,7 +35,7 @@ int file2fd(const char *path, const char
 /* signal to pipe delivery implementation */
 
 /* create a signal pipe, returns 0 for success, -1 with errno for failure */
-int sigpipe_create();
+int sigpipe_create(void);
 
 /* generic handler for signals, writes signal number to pipe */
 void sigpipe_handler(int signum);
@@ -44,11 +44,11 @@ void sigpipe_handler(int signum);
 void sigpipe_assign(int signum);
 
 /* return the signal pipe read file descriptor for select(2) */
-int sigpipe_fd();
+int sigpipe_fd(void);
 
 /* read and return the pending signal from the pipe */
-int sigpipe_read();
+int sigpipe_read(void);
 
-void sigpipe_close();
+void sigpipe_close(void);
 
 #endif /* INC_UTIL_H */
diff -up pptp-1.7.2/vector.c.prototype pptp-1.7.2/vector.c
--- pptp-1.7.2/vector.c.prototype	2008-05-14 07:33:55.000000000 +0100
+++ pptp-1.7.2/vector.c	2011-12-06 16:41:47.409574076 +0000
@@ -35,7 +35,7 @@ struct vector_struct {
 static struct vector_item *binary_search(VECTOR *v, int key);
 
 /*** vector_create ************************************************************/
-VECTOR *vector_create()
+VECTOR *vector_create(void)
 {
     const int INITIAL_SIZE = 4;
 
diff -up pptp-1.7.2/vector.h.prototype pptp-1.7.2/vector.h
--- pptp-1.7.2/vector.h.prototype	2008-05-14 07:33:55.000000000 +0100
+++ pptp-1.7.2/vector.h	2011-12-06 16:41:47.410574077 +0000
@@ -12,7 +12,7 @@
 
 typedef struct vector_struct VECTOR;
 
-VECTOR *vector_create();
+VECTOR *vector_create(void);
 void vector_destroy(VECTOR *v);
 
 int vector_size(VECTOR *v);
