From 89acf06b68e9370625ce1686fb159b70724ce6f5 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?V=C3=ADt=20Ondruch?= <vondruch@redhat.com>
Date: Thu, 2 Jul 2015 09:33:55 +0200
Subject: [PATCH] Migrate to RSpec 3.x.

---
 apipie-rails.gemspec                               |   2 +-
 .../api/v1/architectures_controller_spec.rb        |  15 +-
 .../api/v2/architectures_controller_spec.rb        |   2 +-
 .../api/v2/nested/resources_controller_spec.rb     |   2 +-
 spec/controllers/apipies_controller_spec.rb        |  54 ++---
 spec/controllers/concerns_controller_spec.rb       |  18 +-
 spec/controllers/users_controller_spec.rb          | 226 ++++++++++-----------
 spec/lib/application_spec.rb                       |   6 +-
 spec/lib/method_description_spec.rb                |  14 +-
 spec/lib/param_description_spec.rb                 |  86 ++++----
 spec/lib/param_group_spec.rb                       |  22 +-
 spec/lib/rake_spec.rb                              |  18 +-
 spec/lib/resource_description_spec.rb              |  12 +-
 spec/lib/validator_spec.rb                         |  14 +-
 spec/spec_helper.rb                                |  11 +
 15 files changed, 255 insertions(+), 247 deletions(-)

diff --git a/apipie-rails.gemspec b/apipie-rails.gemspec
index 31d401c..75cfe4e 100644
--- a/apipie-rails.gemspec
+++ b/apipie-rails.gemspec
@@ -18,7 +18,7 @@ Gem::Specification.new do |s|
 
   s.add_development_dependency "rails", ">= 3.0.10"
   s.add_dependency 'json'
-  s.add_development_dependency "rspec-rails", "~> 2.14.2"
+  s.add_development_dependency "rspec-rails", "~> 3.0"
   s.add_development_dependency "sqlite3"
   s.add_development_dependency "minitest"
   s.add_development_dependency "maruku"
diff --git a/spec/controllers/api/v1/architectures_controller_spec.rb b/spec/controllers/api/v1/architectures_controller_spec.rb
index dcdf342..da1eec3 100644
--- a/spec/controllers/api/v1/architectures_controller_spec.rb
+++ b/spec/controllers/api/v1/architectures_controller_spec.rb
@@ -5,24 +5,23 @@ describe Api::V1::ArchitecturesController do
     subject { Apipie.get_resource_description(Api::V1::ArchitecturesController, "1.0") }
 
     it "should be version 1.0" do
-      subject._version.should eq('1.0')
+      expect(subject._version).to eq('1.0')
 
-      Apipie.resource_descriptions['1.0'].size.should == 2
-      Apipie.resource_descriptions['1.0'].keys.should
-        include('architectures', 'base')
+      expect(Apipie.resource_descriptions['1.0'].size).to eq(2)
+      expect(Apipie.resource_descriptions['1.0'].keys).to include('architectures', 'base')
     end
 
     context "there is another version" do
       let(:v2) { archv2 = Apipie.get_resource_description(Api::V2::ArchitecturesController, "2.0") }
 
       it "should have unique doc url" do
-        subject.doc_url.should_not eq(v2.doc_url)
+        expect(subject.doc_url).not_to eq(v2.doc_url)
       end
 
       it "should have unique methods" do
-        subject._methods.keys.should include(:index)
-        v2._methods.keys.should include(:index)
-        subject._methods[:index].should_not eq(v2._methods[:index])
+        expect(subject._methods.keys).to include(:index)
+        expect(v2._methods.keys).to include(:index)
+        expect(subject._methods[:index]).not_to eq(v2._methods[:index])
       end
 
     end
diff --git a/spec/controllers/api/v2/architectures_controller_spec.rb b/spec/controllers/api/v2/architectures_controller_spec.rb
index bcc7c33..7260f8b 100644
--- a/spec/controllers/api/v2/architectures_controller_spec.rb
+++ b/spec/controllers/api/v2/architectures_controller_spec.rb
@@ -5,7 +5,7 @@ describe Api::V2::ArchitecturesController do
     subject { Apipie.get_resource_description(Api::V2::ArchitecturesController, "2.0") }
 
     it "should be version 2.0" do
-      subject._version.should eq('2.0')
+      expect(subject._version).to eq('2.0')
     end
 
   end
diff --git a/spec/controllers/api/v2/nested/resources_controller_spec.rb b/spec/controllers/api/v2/nested/resources_controller_spec.rb
index f35fe2d..ae808c5 100644
--- a/spec/controllers/api/v2/nested/resources_controller_spec.rb
+++ b/spec/controllers/api/v2/nested/resources_controller_spec.rb
@@ -5,7 +5,7 @@ describe Api::V2::Nested::ResourcesController do
     subject { Apipie.get_resource_name(Api::V2::Nested::ResourcesController) }
 
     it "should have resource_id set" do
-      subject.should eq("resource")
+      expect(subject).to eq("resource")
     end
   end
 end
diff --git a/spec/controllers/apipies_controller_spec.rb b/spec/controllers/apipies_controller_spec.rb
index e4e3c9a..2c4b3ff 100644
--- a/spec/controllers/apipies_controller_spec.rb
+++ b/spec/controllers/apipies_controller_spec.rb
@@ -51,18 +51,18 @@ describe Apipie::ApipiesController do
   describe "reload_controllers" do
 
     RSpec::Matchers.define :reload_documentation do
-      match do
-        Apipie.should_receive(:reload_documentation)
+      match_for_should do |actual|
+        expect(Apipie).to receive(:reload_documentation)
+        get :index
+      end
+
+      match_for_should_not do |actual|
+        expect(Apipie).not_to receive(:reload_documentation)
         get :index
-        begin
-          RSpec::Mocks.verify
-        rescue RSpec::Mocks::MockExpectationError
-          false
-        end
       end
 
-      failure_message_for_should { "the documentation expected to be reloaded but it was not" }
-      failure_message_for_should_not { "the documentation expected not to be reloaded but it was" }
+      failure_message { "the documentation expected to be reloaded but it was not" }
+      failure_message_when_negated { "the documentation expected not to be reloaded but it was" }
     end
 
     before do
@@ -75,13 +75,13 @@ describe Apipie::ApipiesController do
     context "it's not specified explicitly" do
       context "and it's in development environment" do
         before do
-          Rails.stub(:env => mock(:development? => true))
+          allow(Rails).to receive_messages(:env => double(:development? => true))
         end
-        it { should reload_documentation }
+        it { is_expected.to reload_documentation }
       end
 
       context "and it's not development environment" do
-        it { should_not reload_documentation }
+        it { is_expected.not_to reload_documentation }
       end
     end
 
@@ -93,13 +93,13 @@ describe Apipie::ApipiesController do
 
       context "and it's in development environment" do
         before do
-          Rails.stub(:env => mock(:development? => true))
+          allow(Rails).to receive_messages(:env => double(:development? => true))
         end
-        it { should reload_documentation }
+        it { is_expected.to reload_documentation }
       end
 
       context "and it's not development environment" do
-        it { should reload_documentation }
+        it { is_expected.to reload_documentation }
       end
     end
 
@@ -110,13 +110,13 @@ describe Apipie::ApipiesController do
 
       context "and it's in development environment" do
         before do
-          Rails.stub(:env => mock(:development? => true))
+          allow(Rails).to receive_messages(:env => double(:development? => true))
         end
-        it { should_not reload_documentation }
+        it { is_expected.not_to reload_documentation }
       end
 
       context "and it's not development environment" do
-        it { should_not reload_documentation }
+        it { is_expected.not_to reload_documentation }
       end
     end
 
@@ -126,7 +126,7 @@ describe Apipie::ApipiesController do
         Apipie.configuration.api_controllers_matcher = nil
       end
 
-      it { should_not reload_documentation }
+      it { is_expected.not_to reload_documentation }
     end
   end
 
@@ -137,7 +137,7 @@ describe Apipie::ApipiesController do
         test = true
       end
       get :index
-      test.should == true
+      expect(test).to eq(true)
     end
   end
 
@@ -170,19 +170,19 @@ describe Apipie::ApipiesController do
 
     it "uses the file in cache dir instead of generating the content on runtime" do
       get :index
-      response.body.should == "apidoc.html cache v1"
+      expect(response.body).to eq("apidoc.html cache v1")
       get :index, :version => 'v1'
-      response.body.should == "apidoc.html cache v1"
+      expect(response.body).to eq("apidoc.html cache v1")
       get :index, :version => 'v2'
-      response.body.should == "apidoc.html cache v2"
+      expect(response.body).to eq("apidoc.html cache v2")
       get :index, :version => 'v1', :format => "html"
-      response.body.should == "apidoc.html cache v1"
+      expect(response.body).to eq("apidoc.html cache v1")
       get :index, :version => 'v1', :format => "json"
-      response.body.should == "apidoc.json cache"
+      expect(response.body).to eq("apidoc.json cache")
       get :index, :version => 'v1', :format => "html", :resource => "resource"
-      response.body.should == "resource.html cache"
+      expect(response.body).to eq("resource.html cache")
       get :index, :version => 'v1', :format => "html", :resource => "resource", :method => "method"
-      response.body.should == "method.html cache"
+      expect(response.body).to eq("method.html cache")
     end
 
   end
diff --git a/spec/controllers/concerns_controller_spec.rb b/spec/controllers/concerns_controller_spec.rb
index 2aeab54..a80d5c5 100644
--- a/spec/controllers/concerns_controller_spec.rb
+++ b/spec/controllers/concerns_controller_spec.rb
@@ -3,8 +3,8 @@ require "spec_helper"
 describe ConcernsController do
 
   it "displays is every controller the concern is included" do
-    Apipie["concern_resources#index"].should be
-    Apipie["concern_resources#show"].should be
+    expect(Apipie["concern_resources#index"]).to be
+    expect(Apipie["concern_resources#show"]).to be
   end
 
   it "should reply to valid request" do
@@ -13,30 +13,30 @@ describe ConcernsController do
   end
 
   it "should pass if required parameter is missing" do
-    lambda { get :show, :id => '5' }.should_not raise_error
+    expect { get :show, :id => '5' }.not_to raise_error
   end
 
   it "peserved the order of methods being defined in file" do
     doc_methods = Apipie.get_resource_description('concern_resources')._methods.keys
-    doc_methods.should == [:index, :show, :create, :update, :custom]
+    expect(doc_methods).to eq([:index, :show, :create, :update, :custom])
   end
 
   it "replaces a placeholder doc specified in concern with a real path" do
     path = Apipie["concern_resources#index"].apis.first.path
-    path.should == '/api/concerns'
+    expect(path).to eq('/api/concerns')
 
     path = Apipie["concern_resources#show"].apis.first.path
-    path.should == '/concern_resources/:id'
+    expect(path).to eq('/concern_resources/:id')
 
     path = Apipie["concern_resources#custom"].apis.first.path
-    path.should == '/concern_resources/custom'
+    expect(path).to eq('/concern_resources/custom')
   end
 
   it "replaces placeholders in param names and descriptions" do
     create_desc = Apipie["concern_resources#create"].params[:user]
     name_param, concern_type_param = create_desc.validator.params_ordered
-    name_param.desc.should include "Name of a user"
-    concern_type_param.name.should == :user_type
+    expect(name_param.desc).to include "Name of a user"
+    expect(concern_type_param.name).to eq(:user_type)
   end
 end
 
diff --git a/spec/controllers/users_controller_spec.rb b/spec/controllers/users_controller_spec.rb
index 8fb2310..2c9bd36 100644
--- a/spec/controllers/users_controller_spec.rb
+++ b/spec/controllers/users_controller_spec.rb
@@ -2,7 +2,7 @@ require 'spec_helper'
 
 def compare_hashes(h1, h2)
   if h1.is_a? String
-    h1.should eq(h2)
+    expect(h1).to eq(h2)
   else
     h1.each do |key, val|
       if val.is_a? Hash
@@ -12,7 +12,7 @@ def compare_hashes(h1, h2)
           compare_hashes val[i], h2[key][i]
         end
       else
-        val.should eq(h2[key])
+        expect(val).to eq(h2[key])
       end
     end
   end
@@ -29,30 +29,30 @@ describe UsersController do
 
     it "should contain all resource methods" do
       methods = subject._methods
-      methods.keys.should include(:show)
-      methods.keys.should include(:create_route)
-      methods.keys.should include(:index)
-      methods.keys.should include(:create)
-      methods.keys.should include(:update)
-      methods.keys.should include(:two_urls)
-      methods.keys.should include(:action_with_headers)
+      expect(methods.keys).to include(:show)
+      expect(methods.keys).to include(:create_route)
+      expect(methods.keys).to include(:index)
+      expect(methods.keys).to include(:create)
+      expect(methods.keys).to include(:update)
+      expect(methods.keys).to include(:two_urls)
+      expect(methods.keys).to include(:action_with_headers)
     end
 
     it "should contain info about resource" do
-      subject._short_description.should eq('Site members')
-      subject._id.should eq('users')
-      subject._path.should eq('/users')
-      subject._version.should eq('development')
-      subject._name.should eq('Users')
-      subject._formats.should eq(['json'])
+      expect(subject._short_description).to eq('Site members')
+      expect(subject._id).to eq('users')
+      expect(subject._path).to eq('/users')
+      expect(subject._version).to eq('development')
+      expect(subject._name).to eq('Users')
+      expect(subject._formats).to eq(['json'])
     end
 
     it "should contain params defined on resource level" do
-      subject._params_args.count.should == 2
+      expect(subject._params_args.count).to eq(2)
       name, type, options = subject._params_args.first
-      name.should == :id
-      type.should == Fixnum
-      options.should == {:required=>false, :desc=>"User ID"}
+      expect(name).to eq(:id)
+      expect(type).to eq(Fixnum)
+      expect(options).to eq({:required=>false, :desc=>"User ID"})
     end
   end
 
@@ -71,7 +71,7 @@ describe UsersController do
       end
 
       it "should pass if required parameter is missing" do
-        lambda { get :show, :id => 5 }.should_not raise_error
+        expect { get :show, :id => 5 }.not_to raise_error
       end
 
     end
@@ -92,17 +92,17 @@ describe UsersController do
           end
 
           it "should reply to valid request" do
-            lambda { get :show, :id => 5, :session => "secret_hash" }.should_not raise_error
+            expect { get :show, :id => 5, :session => "secret_hash" }.not_to raise_error
             assert_response :success
           end
 
           it "should fail if required parameter is missing" do
-            lambda { get :show, :id => 5 }.should raise_error(Apipie::ParamMissing, /\bsession\b/)
+            expect { get :show, :id => 5 }.to raise_error(Apipie::ParamMissing, /\bsession\b/)
           end
 
           it "should pass if required parameter has wrong type" do
-            lambda { get :show, :id => 5, :session => "secret_hash" }.should_not raise_error
-            lambda { get :show, :id => "ten", :session => "secret_hash" }.should_not raise_error
+            expect { get :show, :id => 5, :session => "secret_hash" }.not_to raise_error
+            expect { get :show, :id => "ten", :session => "secret_hash" }.not_to raise_error
           end
 
         end
@@ -115,12 +115,12 @@ describe UsersController do
           end
 
           it "should reply to valid request" do
-            lambda { get :show, :id => 5, :session => "secret_hash" }.should_not raise_error
+            expect { get :show, :id => 5, :session => "secret_hash" }.not_to raise_error
             assert_response :success
           end
 
           it "should fail if extra parameter is passed in" do
-            lambda { get :show, :id => 5, :session => "secret_hash", :badparam => 'badfoo' }.should raise_error(Apipie::UnknownParam, /\bbadparam\b/)
+            expect { get :show, :id => 5, :session => "secret_hash", :badparam => 'badfoo' }.to raise_error(Apipie::UnknownParam, /\bbadparam\b/)
           end
         end
 
@@ -144,15 +144,15 @@ describe UsersController do
           end
 
           it "should fail if required parameter is missing" do
-            lambda { get :show, :id => 5 }.should raise_error(Apipie::ParamMissing, /\bsession\b/)
+            expect { get :show, :id => 5 }.to raise_error(Apipie::ParamMissing, /\bsession\b/)
           end
 
           it "should work with custom Type validator" do
-            lambda {
+            expect {
               get :show,
                   :id => "not a number",
                   :session => "secret_hash"
-            }.should raise_error(Apipie::ParamError, /id/) # old-style error rather than ParamInvalid
+            }.to raise_error(Apipie::ParamError, /id/) # old-style error rather than ParamInvalid
           end
 
           it "should work with Regexp validator" do
@@ -162,12 +162,12 @@ describe UsersController do
                 :regexp_param => "24 years"
             assert_response :success
 
-            lambda {
+            expect {
               get :show,
                   :id => 5,
                   :session => "secret_hash",
                   :regexp_param => "ten years"
-            }.should raise_error(Apipie::ParamInvalid, /regexp_param/)
+            }.to raise_error(Apipie::ParamInvalid, /regexp_param/)
           end
 
           it "should work with Array validator" do
@@ -180,28 +180,28 @@ describe UsersController do
             get :show, :id => 5, :session => "secret_hash", :boolean_param => false
             assert_response :success
 
-            lambda {
+            expect {
               get :show,
                   :id => 5,
                   :session => "secret_hash",
                   :array_param => "blabla"
-            }.should raise_error(Apipie::ParamInvalid, /array_param/)
+            }.to raise_error(Apipie::ParamInvalid, /array_param/)
 
-            lambda {
+            expect {
               get :show,
                   :id => 5,
                   :session => "secret_hash",
                   :array_param => 3
-            }.should raise_error(Apipie::ParamInvalid, /array_param/)
+            }.to raise_error(Apipie::ParamInvalid, /array_param/)
           end
 
           it "should work with Proc validator" do
-            lambda {
+            expect {
               get :show,
                   :id => 5,
                   :session => "secret_hash",
                   :proc_param => "asdgsag"
-            }.should raise_error(Apipie::ParamInvalid, /proc_param/)
+            }.to raise_error(Apipie::ParamInvalid, /proc_param/)
 
             get :show,
                 :id => 5,
@@ -216,25 +216,25 @@ describe UsersController do
 
             a = Apipie[UsersController, :create]
             param = a.params_ordered.select {|p| p.name == :user }
-            param.count.should == 1
-            param.first.validator.class.should eq(Apipie::Validator::HashValidator)
+            expect(param.count).to eq(1)
+            expect(param.first.validator.class).to eq(Apipie::Validator::HashValidator)
             hash_params = param.first.validator.params_ordered
-            hash_params.count.should == 4
+            expect(hash_params.count).to eq(4)
             hash_params[0].name == :name
             hash_params[1].name == :pass
             hash_params[2].name == :membership
 
-            lambda {
+            expect {
               post :create, :user => { :name => "root", :pass => "12345", :membership => "____" }
-            }.should raise_error(Apipie::ParamInvalid, /membership/)
+            }.to raise_error(Apipie::ParamInvalid, /membership/)
 
-            lambda {
+            expect {
               post :create, :user => { :name => "root" }
-            }.should raise_error(Apipie::ParamMissing, /pass/)
+            }.to raise_error(Apipie::ParamMissing, /pass/)
 
-            lambda {
+            expect {
               post :create, :user => "a string is not a hash"
-            }.should raise_error(Apipie::ParamInvalid, /user/)
+            }.to raise_error(Apipie::ParamInvalid, /user/)
 
             post :create, :user => { :name => "root", :pass => "pwd" }
             assert_response :success
@@ -242,7 +242,7 @@ describe UsersController do
 
           it "should support Hash validator without specifying keys" do
             params = Apipie[UsersController, :create].to_json[:params]
-            params.should include(:name => "facts",
+            expect(params).to include(:name => "facts",
                                   :full_name => "facts",
                                   :validator => "Must be Hash",
                                   :description => "\n<p>Additional optional facts about the user</p>\n",
@@ -363,37 +363,37 @@ describe UsersController do
 
     it "should contain basic info about method" do
       a = Apipie[UsersController, :create]
-      a.apis.count.should == 1
-      a.formats.should eq(['json'])
+      expect(a.apis.count).to eq(1)
+      expect(a.formats).to eq(['json'])
       api = a.apis.first
-      api.short_description.should eq("Create user")
-      api.path.should eq("/users")
-      api.http_method.should eq("POST")
+      expect(api.short_description).to eq("Create user")
+      expect(api.path).to eq("/users")
+      expect(api.http_method).to eq("POST")
 
       b = Apipie.get_method_description(UsersController, :show)
-      b.should eq(Apipie[UsersController, :show])
-      b.method.should eq('show')
-      b.resource._id.should eq('users')
+      expect(b).to eq(Apipie[UsersController, :show])
+      expect(b.method).to eq('show')
+      expect(b.resource._id).to eq('users')
 
-      b.apis.count.should == 1
-      b.formats.should eq(['json', 'jsonp'])
+      expect(b.apis.count).to eq(1)
+      expect(b.formats).to eq(['json', 'jsonp'])
       api = b.apis.first
-      api.short_description.should eq("Show user profile")
-      api.path.should eq("/users/:id")
-      api.http_method.should eq("GET")
-      b.full_description.length.should be > 400
+      expect(api.short_description).to eq("Show user profile")
+      expect(api.path).to eq("/users/:id")
+      expect(api.http_method).to eq("GET")
+      expect(b.full_description.length).to be > 400
     end
 
     context "Usign routes.rb" do
       it "should contain basic info about method" do
         a = Apipie[UsersController, :create_route]
-        a.apis.count.should == 1
-        a.formats.should eq(['json'])
+        expect(a.apis.count).to eq(1)
+        expect(a.formats).to eq(['json'])
         api = a.apis.first
-        api.short_description.should eq("Create user")
-        api.path.should eq("/api/users/create_route")
-        api.from_routes.should be_true
-        api.http_method.should eq("POST")
+        expect(api.short_description).to eq("Create user")
+        expect(api.path).to eq("/api/users/create_route")
+        expect(api.from_routes).to be_truthy
+        expect(api.http_method).to eq("POST")
       end
     end
 
@@ -420,9 +420,9 @@ describe UsersController do
         it "should raise exception" do
           api = Apipie[UsersController, :see_another]
           api.instance_variable_set :@see, [Apipie::SeeDescription.new(['doesnot#exist'])]
-          lambda {
+          expect {
             api.see.first.see_url
-          }.should raise_error(ArgumentError, /does not exist/)
+          }.to raise_error(ArgumentError, /does not exist/)
           api.instance_variable_set :@see, []
         end
       end
@@ -431,18 +431,18 @@ describe UsersController do
     it "should contain possible errors description" do
       a = Apipie.get_method_description(UsersController, :show)
 
-      a.errors[0].code.should eq(500)
-      a.errors[0].description.should include("crashed")
-      a.errors[1].code.should eq(401)
-      a.errors[1].description.should eq("Unauthorized")
-      a.errors[2].code.should eq(404)
-      a.errors[2].description.should eq("Not Found")
+      expect(a.errors[0].code).to eq(500)
+      expect(a.errors[0].description).to include("crashed")
+      expect(a.errors[1].code).to eq(401)
+      expect(a.errors[1].description).to eq("Unauthorized")
+      expect(a.errors[2].code).to eq(404)
+      expect(a.errors[2].description).to eq("Not Found")
     end
 
     it "should contain all params description" do
       a = Apipie.get_method_description(UsersController, :show)
-      a.params.count.should == 11
-      a.instance_variable_get('@params_ordered').count.should == 9
+      expect(a.params.count).to eq(11)
+      expect(a.instance_variable_get('@params_ordered').count).to eq(9)
     end
 
     context 'headers' do
@@ -469,7 +469,7 @@ describe UsersController do
 
         it 'contains all headers description in method doc' do
           headers = Apipie.get_method_description(UsersController, :action_with_headers).headers
-          headers.should be_an(Array)
+          expect(headers).to be_an(Array)
 
           compare_hashes headers[0], expected_required_header
           compare_hashes headers[1], expected_optional_header
@@ -489,7 +489,7 @@ describe UsersController do
 
         it 'contains all headers description in resource doc' do
           headers = Apipie.get_resource_description(UsersController)._headers
-          headers.should be_an(Array)
+          expect(headers).to be_an(Array)
 
           compare_hashes headers[0], expected_resource_header
         end
@@ -498,17 +498,17 @@ describe UsersController do
 
     it "should contain all api method description" do
       method_description = Apipie[UsersController, :two_urls]
-      method_description.class.should be(Apipie::MethodDescription)
-      method_description.apis.count.should == 2
+      expect(method_description.class).to be(Apipie::MethodDescription)
+      expect(method_description.apis.count).to eq(2)
       a1, a2 = method_description.apis
 
-      a1.short_description.should eq('Get company users')
-      a1.path.should eq('/company_users')
-      a1.http_method.should eq('GET')
+      expect(a1.short_description).to eq('Get company users')
+      expect(a1.path).to eq('/company_users')
+      expect(a1.http_method).to eq('GET')
 
-      a2.short_description.should eq('Get users working in given company')
-      a2.path.should eq('/company/:id/users')
-      a2.http_method.should eq('GET')
+      expect(a2.short_description).to eq('Get users working in given company')
+      expect(a2.path).to eq('/company/:id/users')
+      expect(a2.http_method).to eq('GET')
     end
 
     it "should be described by valid json" do
@@ -592,7 +592,7 @@ describe UsersController do
   describe "examples" do
 
     it "should be able to load examples from yml file" do
-      Apipie.get_method_description(UsersController, :show).examples.should == [<<EOS1, <<EOS2].map(&:chomp)
+      expect(Apipie.get_method_description(UsersController, :show).examples).to eq [<<EOS1, <<EOS2].map(&:chomp)
 GET /users/14?verbose=true
 200
 {
@@ -606,7 +606,7 @@ EOS2
 
     describe "document" do
       it "should be able to load document from markup file" do
-        Apipie.get_method_description(UsersController, :desc_from_file).full_description.should include("description from document")
+        expect(Apipie.get_method_description(UsersController, :desc_from_file).full_description).to include("description from document")
       end
     end
   end
@@ -617,37 +617,35 @@ EOS2
       a = Apipie.get_method_description(UsersController, :show)
 
       param = a.params[:session]
-      param.required.should eq(true)
-      param.desc.should eq("\n<p>user is logged in</p>\n")
-      param.validator.class.should be(Apipie::Validator::TypeValidator)
-      param.validator.instance_variable_get("@type").should eq(String)
+      expect(param.required).to eq(true)
+      expect(param.desc).to eq("\n<p>user is logged in</p>\n")
+      expect(param.validator.class).to be(Apipie::Validator::TypeValidator)
+      expect(param.validator.instance_variable_get("@type")).to eq(String)
 
       param = a.params[:id]
-      param.required.should eq(true)
-      param.desc.should eq("\n<p>user id</p>\n")
-      param.validator.class.should be(Apipie::Validator::IntegerValidator)
-      param.validator.instance_variable_get("@type").should eq(Integer)
+      expect(param.required).to eq(true)
+      expect(param.desc).to eq("\n<p>user id</p>\n")
+      expect(param.validator.class).to be(Apipie::Validator::IntegerValidator)
+      expect(param.validator.instance_variable_get("@type")).to eq(Integer)
 
       param = a.params[:regexp_param]
-      param.desc.should eq("\n<p>regexp param</p>\n")
-      param.required.should eq(false)
-      param.validator.class.should be(Apipie::Validator::RegexpValidator)
-      param.validator.instance_variable_get("@regexp").should
-        eq(/^[0-9]* years/)
+      expect(param.desc).to eq("\n<p>regexp param</p>\n")
+      expect(param.required).to eq(false)
+      expect(param.validator.class).to be(Apipie::Validator::RegexpValidator)
+      expect(param.validator.instance_variable_get("@regexp")).to eq(/^[0-9]* years/)
 
       param = a.params[:array_param]
-      param.desc.should eq("\n<p>array validator</p>\n")
-      param.validator.class.should be(Apipie::Validator::EnumValidator)
-      param.validator.instance_variable_get("@array").should
-        eq([100, "one", "two", 1, 2])
+      expect(param.desc).to eq("\n<p>array validator</p>\n")
+      expect(param.validator.class).to be(Apipie::Validator::EnumValidator)
+      expect(param.validator.instance_variable_get("@array")).to eq(["100", "one", "two", "1", "2"])
 
       param = a.params[:proc_param]
-      param.desc.should eq("\n<p>proc validator</p>\n")
-      param.validator.class.should be(Apipie::Validator::ProcValidator)
+      expect(param.desc).to eq("\n<p>proc validator</p>\n")
+      expect(param.validator.class).to be(Apipie::Validator::ProcValidator)
 
       param = a.params[:briefer_dsl]
-      param.desc.should eq("\n<p>You dont need :desc =&gt; from now</p>\n")
-      param.validator.class.should be(Apipie::Validator::TypeValidator)
+      expect(param.desc).to eq("\n<p>You dont need :desc =&gt; from now</p>\n")
+      expect(param.validator.class).to be(Apipie::Validator::TypeValidator)
     end
 
   end
@@ -666,10 +664,10 @@ EOS2
 
       it "skips the listed  actions from the documentation" do
         Apipie.define_method_description(UsersController, :ignore, dsl_data)
-        Apipie.get_method_description(UsersController, :ignore).should be_nil
+        expect(Apipie.get_method_description(UsersController, :ignore)).to be_nil
 
         Apipie.define_method_description(UsersController, :dont_ignore, dsl_data)
-        Apipie.get_method_description(UsersController, :dont_ignore).should_not be_nil
+        expect(Apipie.get_method_description(UsersController, :dont_ignore)).not_to be_nil
       end
     end
 
@@ -680,9 +678,9 @@ EOS2
 
       it "skips the listed controller from the documentation" do
         Apipie.define_method_description(IgnoredController, :ignore, dsl_data)
-        Apipie.get_method_description(IgnoredController, :ignore).should be_nil
+        expect(Apipie.get_method_description(IgnoredController, :ignore)).to be_nil
         Apipie.define_method_description(IgnoredController, :ignore, dsl_data)
-        Apipie.get_method_description(IgnoredController, :ignore).should be_nil
+        expect(Apipie.get_method_description(IgnoredController, :ignore)).to be_nil
       end
     end
   end
diff --git a/spec/lib/application_spec.rb b/spec/lib/application_spec.rb
index b9c2153..609c7b2 100644
--- a/spec/lib/application_spec.rb
+++ b/spec/lib/application_spec.rb
@@ -21,13 +21,13 @@ describe Apipie::Application do
       context "with a defined base url" do
         
         it "should not overwrite the parent resource" do
-          should_not eq(Apipie.get_resource_name(Api::V2::ArchitecturesController))
+          is_expected.not_to eq(Apipie.get_resource_name(Api::V2::ArchitecturesController))
         end
         
       end
 
       context "with an undefined base url" do
-        before {Apipie.app.stub(:get_base_url) { nil }}
+        before {allow(Apipie.app).to receive(:get_base_url) { nil }}
 
         it "should not raise an error" do
           expect { Apipie.get_resource_name(Api::V2::ArchitecturesController) }.
@@ -42,7 +42,7 @@ describe Apipie::Application do
       before { Apipie.configuration.namespaced_resources = false }
 
       it "should overwrite the the parent" do
-        should eq(Apipie.get_resource_name(Api::V2::ArchitecturesController))
+        is_expected.to eq(Apipie.get_resource_name(Api::V2::ArchitecturesController))
       end
     end
   end
diff --git a/spec/lib/method_description_spec.rb b/spec/lib/method_description_spec.rb
index b463936..935e1a2 100644
--- a/spec/lib/method_description_spec.rb
+++ b/spec/lib/method_description_spec.rb
@@ -12,7 +12,7 @@ describe Apipie::MethodDescription do
 
     it "should return nil when no metadata is provided" do
       method = Apipie::MethodDescription.new(:a, @resource, dsl_data)
-      method.to_json[:metadata].should == nil
+      expect(method.to_json[:metadata]).to eq(nil)
     end
 
     it "should return the metadata" do
@@ -21,7 +21,7 @@ describe Apipie::MethodDescription do
         :weight => '830g'
       }
       method = Apipie::MethodDescription.new(:a, @resource, dsl_data.update(:meta => meta))
-      method.to_json[:metadata].should == meta
+      expect(method.to_json[:metadata]).to eq(meta)
     end
 
   end
@@ -34,7 +34,7 @@ describe Apipie::MethodDescription do
     it "should return the deprecated flag when provided" do
       dsl_data[:api_args] = [[:GET, "/foo/bar", "description", {:deprecated => true}]]
       method = Apipie::MethodDescription.new(:a, @resource, dsl_data)
-      method.method_apis_to_json.first[:deprecated].should == true
+      expect(method.method_apis_to_json.first[:deprecated]).to eq(true)
     end
   end
 
@@ -50,13 +50,13 @@ describe Apipie::MethodDescription do
     end
 
     it "should be ordered" do
-      @method.params.keys.should == [:a, :b, :c]
-      @method.to_json[:params].map{|h| h[:name]}.should == ['a', 'b', 'c']
+      expect(@method.params.keys).to eq([:a, :b, :c])
+      expect(@method.to_json[:params].map{|h| h[:name]}).to eq(['a', 'b', 'c'])
     end
 
     it "should be still ordered" do
-      @method.params.keys.should == [:a, :b, :c]
-      @method.to_json[:params].map{|h| h[:name]}.should == ['a', 'b', 'c']
+      expect(@method.params.keys).to eq([:a, :b, :c])
+      expect(@method.to_json[:params].map{|h| h[:name]}).to eq(['a', 'b', 'c'])
     end
 
   end
diff --git a/spec/lib/param_description_spec.rb b/spec/lib/param_description_spec.rb
index 413453a..73cd6b7 100644
--- a/spec/lib/param_description_spec.rb
+++ b/spec/lib/param_description_spec.rb
@@ -16,7 +16,7 @@ describe Apipie::ParamDescription do
 
     it "should return nil when no metadata is provided" do
       param = Apipie::ParamDescription.new(method_desc, :some_param, String)
-      param.to_json[:metadata].should == nil
+      expect(param.to_json[:metadata]).to eq(nil)
     end
 
     it "should return the metadata" do
@@ -25,7 +25,7 @@ describe Apipie::ParamDescription do
         :weight => '830g'
       }
       param = Apipie::ParamDescription.new(method_desc, :some_param, String, :meta => meta)
-      param.to_json[:metadata].should == meta
+      expect(param.to_json[:metadata]).to eq(meta)
     end
 
   end
@@ -34,15 +34,15 @@ describe Apipie::ParamDescription do
 
     it "should return true when show option is not provided" do
       param = Apipie::ParamDescription.new(method_desc, :some_param, String)
-      param.to_json[:show].should == true
+      expect(param.to_json[:show]).to eq(true)
     end
 
     it "should return the show option" do
       param = Apipie::ParamDescription.new(method_desc, :some_param, String, :show => true)
-      param.to_json[:show].should == true
+      expect(param.to_json[:show]).to eq(true)
 
       param = Apipie::ParamDescription.new(method_desc, :some_param, String, :show => false)
-      param.to_json[:show].should == false
+      expect(param.to_json[:show]).to eq(false)
     end
 
   end
@@ -52,7 +52,7 @@ describe Apipie::ParamDescription do
 
       it "should return name" do
         param = Apipie::ParamDescription.new(method_desc, :some_param, String)
-        param.to_json[:full_name].should == 'some_param'
+        expect(param.to_json[:full_name]).to eq('some_param')
       end
 
     end
@@ -63,7 +63,7 @@ describe Apipie::ParamDescription do
         parent_param = Apipie::ParamDescription.new(method_desc, :parent, String)
         nested_param = Apipie::ParamDescription.new(method_desc, :nested, String, :parent => parent_param)
 
-        nested_param.to_json[:full_name].should == 'parent[nested]'
+        expect(nested_param.to_json[:full_name]).to eq('parent[nested]')
       end
 
       context "with the parent parameter set to not show" do
@@ -72,7 +72,7 @@ describe Apipie::ParamDescription do
           parent_param = Apipie::ParamDescription.new(method_desc, :parent, String, :show => false)
           nested_param = Apipie::ParamDescription.new(method_desc, :nested, String, :parent => parent_param)
 
-          nested_param.to_json[:full_name].should == 'nested'
+          expect(nested_param.to_json[:full_name]).to eq('nested')
         end
 
       end
@@ -83,17 +83,17 @@ describe Apipie::ParamDescription do
 
     it "should allow nil validator" do
       param = Apipie::ParamDescription.new(method_desc, :hidden_param, nil)
-      param.validator.should be_nil
+      expect(param.validator).to be_nil
     end
 
     it "should throw exception on unknown validator" do
-      proc { Apipie::ParamDescription.new(method_desc, :param, :unknown) }.should raise_error(RuntimeError, /Validator.*not found/)
+      expect { Apipie::ParamDescription.new(method_desc, :param, :unknown) }.to raise_error(RuntimeError, /Validator.*not found/)
     end
 
     it "should pick type validator" do
-      Apipie::Validator::BaseValidator.should_receive(:find).and_return(:validator_instance)
+      expect(Apipie::Validator::BaseValidator).to receive(:find).and_return(:validator_instance)
       param = Apipie::ParamDescription.new(method_desc, :param, String)
-      param.validator.should == :validator_instance
+      expect(param.validator).to eq(:validator_instance)
     end
 
   end
@@ -112,27 +112,27 @@ describe Apipie::ParamDescription do
 
     it "should replace string parameter name with colon prefix" do
       param = Apipie::ParamDescription.new(concern_method_desc, ":string_subst", String)
-      param.name.should == "string"
+      expect(param.name).to eq("string")
     end
 
     it "should replace symbol parameter name" do
       param = Apipie::ParamDescription.new(concern_method_desc, :concern, String)
-      param.name.should == :user
+      expect(param.name).to eq(:user)
     end
 
     it "should keep original value for strings without colon prefixes" do
       param = Apipie::ParamDescription.new(concern_method_desc, "string_subst", String)
-      param.name.should == "string_subst"
+      expect(param.name).to eq("string_subst")
     end
 
     it "should keep the original value when a string can't be replaced" do
       param = Apipie::ParamDescription.new(concern_method_desc, ":param", String)
-      param.name.should == ":param"
+      expect(param.name).to eq(":param")
     end
 
     it "should keep the original value when a symbol can't be replaced" do
       param = Apipie::ParamDescription.new(concern_method_desc, :param, String)
-      param.name.should == :param
+      expect(param.name).to eq(:param)
     end
   end
 
@@ -144,12 +144,12 @@ describe Apipie::ParamDescription do
 
       it "should set param as required by default" do
         param = Apipie::ParamDescription.new(method_desc, :required_by_default, String)
-        param.required.should be_true
+        expect(param.required).to be_truthy
       end
 
       it "should be possible to set param as optional" do
         param = Apipie::ParamDescription.new(method_desc, :optional, String, :required => false)
-        param.required.should be_false
+        expect(param.required).to be_falsey
       end
 
     end
@@ -160,12 +160,12 @@ describe Apipie::ParamDescription do
 
       it "should set param as optional by default" do
         param = Apipie::ParamDescription.new(method_desc, :optional_by_default, String)
-        param.required.should be_false
+        expect(param.required).to be_falsey
       end
 
       it "should be possible to set param as required" do
         param = Apipie::ParamDescription.new(method_desc, :required, String, 'description','required' => true)
-        param.required.should be_true
+        expect(param.required).to be_truthy
       end
 
     end
@@ -191,13 +191,13 @@ describe Apipie::ParamDescription do
       end
 
       it "makes the param required" do
-        required.should include :name
-        required.should include :pass
+        expect(required).to include :name
+        expect(required).to include :pass
       end
 
       it "doesn't allow nil" do
-        allowed_nil.should_not include :name
-        allowed_nil.should_not include :pass
+        expect(allowed_nil).not_to include :name
+        expect(allowed_nil).not_to include :pass
       end
     end
 
@@ -208,17 +208,17 @@ describe Apipie::ParamDescription do
       end
 
       it "doesn't make the param required" do
-        required.should_not include :name
-        required.should_not include :pass
+        expect(required).not_to include :name
+        expect(required).not_to include :pass
       end
 
       it "doesn't allow nil" do
-        allowed_nil.should_not include :name
-        allowed_nil.should_not include :pass
+        expect(allowed_nil).not_to include :name
+        expect(allowed_nil).not_to include :pass
       end
 
       it "doesn't touch params with explicitly set allow_nil" do
-        allowed_nil.should_not include :membership
+        expect(allowed_nil).not_to include :membership
       end
     end
 
@@ -228,13 +228,13 @@ describe Apipie::ParamDescription do
       end
 
       it "makes the param required" do
-        required.should include :name
-        required.should include :pass
+        expect(required).to include :name
+        expect(required).to include :pass
       end
 
       it "doesn't allow nil" do
-        allowed_nil.should_not include :name
-        allowed_nil.should_not include :pass
+        expect(allowed_nil).not_to include :name
+        expect(allowed_nil).not_to include :pass
       end
     end
   end
@@ -252,10 +252,10 @@ describe Apipie::ParamDescription do
 
       it "should include the nested params in the json" do
         sub_params = subject.to_json[:params]
-        sub_params.size.should == 1
+        expect(sub_params.size).to eq(1)
         sub_param = sub_params.first
-        sub_param[:name].should == "answer"
-        sub_param[:full_name].should == "param[answer]"
+        expect(sub_param[:name]).to eq("answer")
+        expect(sub_param[:full_name]).to eq("param[answer]")
       end
 
     end
@@ -270,10 +270,10 @@ describe Apipie::ParamDescription do
 
       it "should include the nested params in the json" do
         sub_params = subject.to_json[:params]
-        sub_params.size.should == 1
+        expect(sub_params.size).to eq(1)
         sub_param = sub_params.first
-        sub_param[:name].should == "answer"
-        sub_param[:full_name].should == "param[answer]"
+        expect(sub_param[:name]).to eq("answer")
+        expect(sub_param[:full_name]).to eq("param[answer]")
       end
 
     end
@@ -285,7 +285,7 @@ describe Apipie::ParamDescription do
       end
 
       it "should include the nested params in the json" do
-        subject.to_json[:params].should be_nil
+        expect(subject.to_json[:params]).to be_nil
       end
 
     end
@@ -295,8 +295,8 @@ describe Apipie::ParamDescription do
   describe "Array with classes" do
     it "should be valid for objects included in class array" do
       param = Apipie::ParamDescription.new(method_desc, :param, [Fixnum, String])
-      expect { param.validate("1") }.should_not raise_error
-      expect { param.validate(Fixnum) }.should raise_error
+      expect { param.validate("1") }.not_to raise_error
+      expect { param.validate(Fixnum) }.to raise_error
     end
   end
 
diff --git a/spec/lib/param_group_spec.rb b/spec/lib/param_group_spec.rb
index 5fa87f4..9db23c3 100644
--- a/spec/lib/param_group_spec.rb
+++ b/spec/lib/param_group_spec.rb
@@ -10,25 +10,25 @@ describe "param groups" do
     user_update_params = user_update_desc.validator.params_ordered.map(&:name)
 
     common = user_update_params & user_create_params
-    common.sort_by(&:to_s).should == user_update_params.sort_by(&:to_s)
+    expect(common.sort_by(&:to_s)).to eq(user_update_params.sort_by(&:to_s))
   end
 
   it "allows using groups is nested param descriptions" do
     user_create_desc = Apipie["users#update"].params[:user]
     user_create_params = user_create_desc.validator.params_ordered.map(&:name)
-    user_create_params.map(&:to_s).sort.should == %w[membership name pass]
+    expect(user_create_params.map(&:to_s).sort).to eq(%w[membership name pass])
   end
 
   it "should allow adding additional params to group" do
     user_create_desc = Apipie["users#create"].params[:user]
     user_create_params = user_create_desc.validator.params_ordered.map(&:name)
-    user_create_params.map(&:to_s).sort.should == %w[membership name pass permalink]
+    expect(user_create_params.map(&:to_s).sort).to eq(%w[membership name pass permalink])
   end
 
   context "hash param" do
     it "influences only its childs" do
-      Apipie["users#create"].params[:user].required.should be true
-      Apipie["users#update"].params[:user].required.should be true
+      expect(Apipie["users#create"].params[:user].required).to be true
+      expect(Apipie["users#update"].params[:user].required).to be true
     end
   end
 
@@ -39,21 +39,21 @@ describe "param groups" do
     arch_v2_desc = Apipie["2.0#architectures#create"].params[:architecture]
     arch_v2_params = arch_v2_desc.validator.params_ordered.map(&:name)
 
-    arch_v1_params.sort_by(&:to_s).should == arch_v2_params.sort_by(&:to_s)
+    expect(arch_v1_params.sort_by(&:to_s)).to eq(arch_v2_params.sort_by(&:to_s))
   end
 
   it "should replace parameter name in a group when it comes from concern" do
-    Apipie["overridden_concern_resources#update"].params.has_key?(:user).should == true
+    expect(Apipie["overridden_concern_resources#update"].params.has_key?(:user)).to eq(true)
   end
 
   it "shouldn't replace parameter name in a group redefined in the controller" do
-    Apipie["overridden_concern_resources#create"].params.has_key?(:concern).should == true
-    Apipie["overridden_concern_resources#create"].params.has_key?(:user).should == false
+    expect(Apipie["overridden_concern_resources#create"].params.has_key?(:concern)).to eq(true)
+    expect(Apipie["overridden_concern_resources#create"].params.has_key?(:user)).to eq(false)
   end
 
 it "shouldn't replace name of a parameter defined in the controller" do
-    Apipie["overridden_concern_resources#custom"].params.has_key?(:concern).should == true
-    Apipie["overridden_concern_resources#custom"].params.has_key?(:user).should == false
+    expect(Apipie["overridden_concern_resources#custom"].params.has_key?(:concern)).to eq(true)
+    expect(Apipie["overridden_concern_resources#custom"].params.has_key?(:user)).to eq(false)
   end
 
 end
diff --git a/spec/lib/rake_spec.rb b/spec/lib/rake_spec.rb
index b30e0ec..6f19eb4 100644
--- a/spec/lib/rake_spec.rb
+++ b/spec/lib/rake_spec.rb
@@ -24,23 +24,23 @@ describe 'rake tasks' do
 
     describe 'apipie:static' do
       it "generates static files for the default version of apipie docs" do
-        apidoc_html.should =~ /Test app #{Apipie.configuration.default_version}/
+        expect(apidoc_html).to match(/Test app #{Apipie.configuration.default_version}/)
       end
 
       it "includes the stylesheets" do
-        apidoc_html.should include('./apidoc/stylesheets/bundled/bootstrap.min.css')
-        File.should exist(File.join(doc_output, 'stylesheets/bundled/bootstrap.min.css'))
+        expect(apidoc_html).to include('./apidoc/stylesheets/bundled/bootstrap.min.css')
+        expect(File).to exist(File.join(doc_output, 'stylesheets/bundled/bootstrap.min.css'))
       end
     end
 
     describe 'apipie:static[2.0]' do
       it "generates static files for the default version of apipie docs" do
-        apidoc_html.should =~ /Test app 2.0/
+        expect(apidoc_html).to match(/Test app 2.0/)
       end
 
       it "includes the stylesheets" do
-        apidoc_html.should include('./apidoc/stylesheets/bundled/bootstrap.min.css')
-        File.should exist(File.join(doc_output, 'stylesheets/bundled/bootstrap.min.css'))
+        expect(apidoc_html).to include('./apidoc/stylesheets/bundled/bootstrap.min.css')
+        expect(File).to exist(File.join(doc_output, 'stylesheets/bundled/bootstrap.min.css'))
       end
     end
   end
@@ -59,9 +59,9 @@ describe 'rake tasks' do
     end
 
     it "generates cache files" do
-      File.should exist(File.join(cache_output, 'apidoc.html'))
-      File.should exist(File.join(cache_output, 'apidoc/development.html'))
-      File.should exist(File.join(cache_output, 'apidoc/development/users.html'))
+      expect(File).to exist(File.join(cache_output, 'apidoc.html'))
+      expect(File).to exist(File.join(cache_output, 'apidoc/development.html'))
+      expect(File).to exist(File.join(cache_output, 'apidoc/development/users.html'))
 
     end
   end
diff --git a/spec/lib/resource_description_spec.rb b/spec/lib/resource_description_spec.rb
index a2e2b09..bb63bc6 100644
--- a/spec/lib/resource_description_spec.rb
+++ b/spec/lib/resource_description_spec.rb
@@ -8,7 +8,7 @@ describe Apipie::ResourceDescription do
 
     it "should return nil when no metadata is provided" do
       resource = Apipie::ResourceDescription.new(ApplicationController, "dummy", dsl_data)
-      resource.to_json[:metadata].should == nil
+      expect(resource.to_json[:metadata]).to eq(nil)
     end
 
     it "should return the metadata" do
@@ -17,7 +17,7 @@ describe Apipie::ResourceDescription do
         :weight => '830g'
       }
       resource = Apipie::ResourceDescription.new(ApplicationController, "dummy", dsl_data.update(:meta => meta))
-      resource.to_json[:metadata].should == meta
+      expect(resource.to_json[:metadata]).to eq(meta)
     end
 
   end
@@ -35,13 +35,13 @@ describe Apipie::ResourceDescription do
     end
 
     it "should be ordered" do
-      @resource._methods.keys.should == [:a, :b, :c]
-      @resource.to_json[:methods].map{|h| h[:name]}.should == ['a', 'b', 'c']
+      expect(@resource._methods.keys).to eq([:a, :b, :c])
+      expect(@resource.to_json[:methods].map{|h| h[:name]}).to eq(['a', 'b', 'c'])
     end
 
     it "should be still ordered" do
-      @resource._methods.keys.should == [:a, :b, :c]
-      @resource.to_json[:methods].map{|h| h[:name]}.should == ['a', 'b', 'c']
+      expect(@resource._methods.keys).to eq([:a, :b, :c])
+      expect(@resource.to_json[:methods].map{|h| h[:name]}).to eq(['a', 'b', 'c'])
     end
 
   end
diff --git a/spec/lib/validator_spec.rb b/spec/lib/validator_spec.rb
index 0d945e0..badcc34 100644
--- a/spec/lib/validator_spec.rb
+++ b/spec/lib/validator_spec.rb
@@ -22,22 +22,22 @@ describe Apipie::Validator do
 
       it "should return hash for type Hash" do
         validator = Apipie::Validator::TypeValidator.new(params_desc, Hash)
-        validator.expected_type.should == 'hash'
+        expect(validator.expected_type).to eq('hash')
       end
 
       it "should return array for type Array" do
         validator = Apipie::Validator::TypeValidator.new(params_desc, Array)
-        validator.expected_type.should == 'array'
+        expect(validator.expected_type).to eq('array')
       end
 
       it "should return numeric for type Numeric" do
         validator = Apipie::Validator::TypeValidator.new(params_desc, Numeric)
-        validator.expected_type.should == 'numeric'
+        expect(validator.expected_type).to eq('numeric')
       end
 
       it "should return string by default" do
         validator = Apipie::Validator::TypeValidator.new(params_desc, Symbol)
-        validator.expected_type.should == 'string'
+        expect(validator.expected_type).to eq('string')
       end
 
     end
@@ -47,9 +47,9 @@ describe Apipie::Validator do
   describe 'ArrayClassValidator' do
     it "should validate by object class" do
       validator = Apipie::Validator::ArrayClassValidator.new(params_desc, [Fixnum, String])
-      validator.validate("1").should be_true
-      validator.validate(1).should be_true
-      validator.validate({ 1 => 1 }).should be_false
+      expect(validator.validate("1")).to be_truthy
+      expect(validator.validate(1)).to be_truthy
+      expect(validator.validate({ 1 => 1 })).to be_falsey
     end
   end
 end
diff --git a/spec/spec_helper.rb b/spec/spec_helper.rb
index 1d87700..79a4c8c 100644
--- a/spec/spec_helper.rb
+++ b/spec/spec_helper.rb
@@ -30,4 +30,15 @@ RSpec.configure do |config|
   # automatically. This will be the default behavior in future versions of
   # rspec-rails.
   config.infer_base_class_for_anonymous_controllers = false
+
+  # rspec-rails 3 will no longer automatically infer an example group's spec type
+  # from the file location. You can explicitly opt-in to the feature using this
+  # config option.
+  # To explicitly tag specs without using automatic inference, set the `:type`
+  # metadata manually:
+  #
+  #     describe ThingsController, :type => :controller do
+  #       # Equivalent to being in spec/controllers
+  #     end
+  config.infer_spec_type_from_file_location!
 end
-- 
2.4.3

