From d29825db356c7ea240e62404c5d3422c01c18bd4 Mon Sep 17 00:00:00 2001
From: Peter Jones <pjones@redhat.com>
Date: Fri, 10 Sep 2010 16:04:38 -0400
Subject: [PATCH 3/7] Add "modelist" test app.

This lists video modes the GOP driver is showing us.
---
 apps/Makefile   |    2 +-
 apps/modelist.c |   87 +++++++++++++++++++++++++++++++++++++++++++++++++++++++
 2 files changed, 88 insertions(+), 1 deletion(-)
 create mode 100644 apps/modelist.c

diff --git a/apps/Makefile b/apps/Makefile
index 6bda7ea..45bc4ac 100644
--- a/apps/Makefile
+++ b/apps/Makefile
@@ -58,7 +58,7 @@ LDFLAGS		+= -T $(LDSCRIPT) -shared -Bsymbolic -L../lib -L../gnuefi $(CRTOBJS)
 LOADLIBES	= -lefi -lgnuefi $(shell $(CC) $(ARCH3264) -print-libgcc-file-name)
 FORMAT		= efi-app-$(ARCH)
 
-TARGETS = t.efi t2.efi t3.efi t4.efi t5.efi t6.efi printenv.efi t7.efi tcc.efi route80h.efi
+TARGETS = t.efi t2.efi t3.efi t4.efi t5.efi t6.efi printenv.efi t7.efi tcc.efi route80h.efi modelist.efi
 
 all:	$(TARGETS)
 
diff --git a/apps/modelist.c b/apps/modelist.c
new file mode 100644
index 0000000..c4a4b1a
--- /dev/null
+++ b/apps/modelist.c
@@ -0,0 +1,87 @@
+#include <efi.h>
+#include <efilib.h>
+
+extern EFI_GUID GraphicsOutputProtocol;
+
+static void
+print_modes(EFI_GRAPHICS_OUTPUT_PROTOCOL *gop)
+{
+	int i, imax;
+	EFI_STATUS rc;
+
+	imax = gop->Mode->MaxMode;
+
+	Print(L"GOP reports MaxMode %d\n", imax);
+	for (i = 0; i < imax; i++) {
+		EFI_GRAPHICS_OUTPUT_MODE_INFORMATION *info;
+		UINTN SizeOfInfo;
+		rc = uefi_call_wrapper(gop->QueryMode, 4, gop, i, &SizeOfInfo,
+					&info);
+		if (EFI_ERROR(rc)) {
+			CHAR16 Buffer[64];
+			StatusToString(Buffer, rc);
+			Print(L"%d: Bad response from QueryMode: %s (%d)\n",
+				i, Buffer, rc);
+			continue;
+		}
+		Print(L"%c%d: %dx%d ", memcmp(info,gop->Mode->Info,sizeof(*info)) == 0 ? '*' : ' ', i,
+			info->HorizontalResolution,
+			info->VerticalResolution);
+		switch(info->PixelFormat) {
+			case PixelRedGreenBlueReserved8BitPerColor:
+				Print(L"RGBR");
+				break;
+			case PixelBlueGreenRedReserved8BitPerColor:
+				Print(L"BGRR");
+				break;
+			case PixelBitMask:
+				Print(L"R:%08x G:%08x B:%08x X:%08x",
+					info->PixelInformation.RedMask,
+					info->PixelInformation.GreenMask,
+					info->PixelInformation.BlueMask,
+					info->PixelInformation.ReservedMask);
+				break;
+			case PixelBltOnly:
+				Print(L"(blt only)");
+				break;
+			default:
+				Print(L"(Invalid pixel format)");
+				break;
+		}
+		Print(L" pitch %d\n", info->PixelsPerScanLine);
+	}
+}
+
+static EFI_STATUS
+SetWatchdog(UINTN seconds)
+{
+	EFI_STATUS rc;
+	rc = uefi_call_wrapper(BS->SetWatchdogTimer, 4, seconds, 0x1ffff,
+				0, NULL);
+	if (EFI_ERROR(rc)) {
+		CHAR16 Buffer[64];
+		StatusToString(Buffer, rc);
+		Print(L"Bad response from QueryMode: %s (%d)\n", Buffer, rc);
+	}
+	return rc;
+}
+
+EFI_STATUS
+efi_main (EFI_HANDLE image_handle, EFI_SYSTEM_TABLE *systab)
+{
+	EFI_STATUS rc;
+	EFI_GRAPHICS_OUTPUT_PROTOCOL *gop;
+
+	InitializeLib(image_handle, systab);
+
+	SetWatchdog(10);
+
+	rc = LibLocateProtocol(&GraphicsOutputProtocol, (void **)&gop);
+	if (EFI_ERROR(rc))
+		return rc;
+
+	print_modes(gop);
+
+	SetWatchdog(0);
+	return EFI_SUCCESS;
+}
-- 
1.7.10.4

