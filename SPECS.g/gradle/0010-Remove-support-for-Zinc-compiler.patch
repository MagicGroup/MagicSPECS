From 0cbc24828243c4dd2370359712ff783b2a30aa31 Mon Sep 17 00:00:00 2001
From: Mikolaj Izdebski <mizdebsk@redhat.com>
Date: Fri, 24 Apr 2015 10:18:37 +0200
Subject: [PATCH 10/15] Remove support for Zinc compiler

---
 subprojects/language-scala/language-scala.gradle   |   2 -
 .../internal/tasks/scala/ZincScalaCompiler.java    | 127 ---------------------
 .../toolchain/DefaultScalaToolProvider.java        |   3 -
 .../internal/tasks/scala/ScalaCompilerFactory.java |   4 +-
 4 files changed, 1 insertion(+), 135 deletions(-)
 delete mode 100644 subprojects/language-scala/src/main/java/org/gradle/api/internal/tasks/scala/ZincScalaCompiler.java

diff --git a/subprojects/language-scala/language-scala.gradle b/subprojects/language-scala/language-scala.gradle
index b1de04c..d5f2b52 100644
--- a/subprojects/language-scala/language-scala.gradle
+++ b/subprojects/language-scala/language-scala.gradle
@@ -5,8 +5,6 @@ dependencies {
     compile project(":platformJvm")
     compile project(":languageJava")
     compile project(":languageJvm")
-    // keep in sync with ScalaLanguagePlugin code
-    provided("com.typesafe.zinc:zinc:0.3.7")
 
     testCompile libraries.groovy
 }
diff --git a/subprojects/language-scala/src/main/java/org/gradle/api/internal/tasks/scala/ZincScalaCompiler.java b/subprojects/language-scala/src/main/java/org/gradle/api/internal/tasks/scala/ZincScalaCompiler.java
deleted file mode 100644
index c49d517..0000000
--- a/subprojects/language-scala/src/main/java/org/gradle/api/internal/tasks/scala/ZincScalaCompiler.java
+++ /dev/null
@@ -1,127 +0,0 @@
-/*
- * Copyright 2012 the original author or authors.
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.gradle.api.internal.tasks.scala;
-
-import com.google.common.collect.ImmutableList;
-import com.google.common.collect.Lists;
-import com.typesafe.zinc.*;
-import org.gradle.api.internal.tasks.SimpleWorkResult;
-import org.gradle.api.internal.tasks.compile.CompilationFailedException;
-import org.gradle.language.base.internal.compile.Compiler;
-import org.gradle.api.internal.tasks.compile.JavaCompilerArgumentsBuilder;
-import org.gradle.api.logging.Logger;
-import org.gradle.api.logging.Logging;
-import org.gradle.api.tasks.WorkResult;
-import org.gradle.internal.jvm.Jvm;
-import scala.Option;
-import xsbti.F0;
-
-import java.io.File;
-import java.io.Serializable;
-import java.util.List;
-
-public class ZincScalaCompiler implements Compiler<ScalaJavaJointCompileSpec>, Serializable {
-    private static final Logger LOGGER = Logging.getLogger(ZincScalaCompiler.class);
-    private final Iterable<File> scalaClasspath;
-    private Iterable<File> zincClasspath;
-
-    public ZincScalaCompiler(Iterable<File> scalaClasspath, Iterable<File> zincClasspath) {
-        this.scalaClasspath = scalaClasspath;
-        this.zincClasspath = zincClasspath;
-    }
-
-    public WorkResult execute(ScalaJavaJointCompileSpec spec) {
-        return Compiler.execute(scalaClasspath, zincClasspath, spec);
-    }
-
-    // need to defer loading of Zinc/sbt/Scala classes until we are
-    // running in the compiler daemon and have them on the class path
-    private static class Compiler {
-        static WorkResult execute(Iterable<File> scalaClasspath, Iterable<File> zincClasspath, ScalaJavaJointCompileSpec spec) {
-            LOGGER.info("Compiling with Zinc Scala compiler.");
-
-            xsbti.Logger logger = new SbtLoggerAdapter();
-
-            com.typesafe.zinc.Compiler compiler = createCompiler(scalaClasspath, zincClasspath, logger);
-            List<String> scalacOptions = new ZincScalaCompilerArgumentsGenerator().generate(spec);
-            List<String> javacOptions = new JavaCompilerArgumentsBuilder(spec).includeClasspath(false).build();
-            Inputs inputs = Inputs.create(ImmutableList.copyOf(spec.getClasspath()), ImmutableList.copyOf(spec.getSource()), spec.getDestinationDir(),
-                    scalacOptions, javacOptions, spec.getScalaCompileOptions().getIncrementalOptions().getAnalysisFile(), spec.getAnalysisMap(), "mixed", getIncOptions(), true);
-            if (LOGGER.isDebugEnabled()) {
-                Inputs.debug(inputs, logger);
-            }
-
-            try {
-                compiler.compile(inputs, logger);
-            } catch (xsbti.CompileFailed e) {
-                throw new CompilationFailedException(e);
-            }
-
-            return new SimpleWorkResult(true);
-        }
-
-        private static IncOptions getIncOptions() {
-            //The values are based on what I have found in sbt-compiler-maven-plugin.googlecode.com and zinc documentation
-            //Hard to say what effect they have on the incremental build
-            int transitiveStep = 3;
-            double recompileAllFraction = 0.5d;
-            boolean relationsDebug = false;
-            boolean apiDebug = false;
-            int apiDiffContextSize = 5;
-            Option<File> apiDumpDirectory = Option.empty();
-            boolean transactional = false;
-            Option<File> backup = Option.empty();
-
-            // We need to use the deprecated constructor as it is compatible with certain previous versions of the Zinc compiler
-            @SuppressWarnings("deprecation")
-            IncOptions options = new IncOptions(transitiveStep, recompileAllFraction, relationsDebug, apiDebug, apiDiffContextSize, apiDumpDirectory, transactional, backup);
-            return options;
-        }
-
-        static com.typesafe.zinc.Compiler createCompiler(Iterable<File> scalaClasspath, Iterable<File> zincClasspath, xsbti.Logger logger) {
-            ScalaLocation scalaLocation = ScalaLocation.fromPath(Lists.newArrayList(scalaClasspath));
-            SbtJars sbtJars = SbtJars.fromPath(Lists.newArrayList(zincClasspath));
-            Setup setup = Setup.create(scalaLocation, sbtJars, Jvm.current().getJavaHome(), true);
-            if (LOGGER.isDebugEnabled()) {
-                Setup.debug(setup, logger);
-            }
-            return com.typesafe.zinc.Compiler.getOrCreate(setup, logger);
-        }
-    }
-
-    private static class SbtLoggerAdapter implements xsbti.Logger {
-        public void error(F0<String> msg) {
-            LOGGER.error(msg.apply());
-        }
-
-        public void warn(F0<String> msg) {
-            LOGGER.warn(msg.apply());
-        }
-
-        public void info(F0<String> msg) {
-            LOGGER.info(msg.apply());
-        }
-
-        public void debug(F0<String> msg) {
-            LOGGER.debug(msg.apply());
-        }
-
-        public void trace(F0<Throwable> exception) {
-            LOGGER.trace(exception.apply().toString());
-        }
-    }
-}
diff --git a/subprojects/language-scala/src/main/java/org/gradle/language/scala/internal/toolchain/DefaultScalaToolProvider.java b/subprojects/language-scala/src/main/java/org/gradle/language/scala/internal/toolchain/DefaultScalaToolProvider.java
index 6c33ce5..5e9c34a 100644
--- a/subprojects/language-scala/src/main/java/org/gradle/language/scala/internal/toolchain/DefaultScalaToolProvider.java
+++ b/subprojects/language-scala/src/main/java/org/gradle/language/scala/internal/toolchain/DefaultScalaToolProvider.java
@@ -21,7 +21,6 @@ import org.gradle.api.internal.tasks.compile.daemon.CompilerDaemonManager;
 import org.gradle.api.internal.tasks.scala.DaemonScalaCompiler;
 import org.gradle.api.internal.tasks.scala.NormalizingScalaCompiler;
 import org.gradle.api.internal.tasks.scala.ScalaJavaJointCompileSpec;
-import org.gradle.api.internal.tasks.scala.ZincScalaCompiler;
 import org.gradle.language.base.internal.compile.CompileSpec;
 import org.gradle.language.base.internal.compile.Compiler;
 import org.gradle.platform.base.internal.toolchain.ToolProvider;
@@ -49,8 +48,6 @@ public class DefaultScalaToolProvider implements ToolProvider {
     public <T extends CompileSpec> org.gradle.language.base.internal.compile.Compiler<T> newCompiler(Class<T> spec) {
         if (ScalaJavaJointCompileSpec.class.isAssignableFrom(spec)) {
             File projectDir = projectFinder.getProject(":").getProjectDir();
-            Compiler<ScalaJavaJointCompileSpec> scalaCompiler = new ZincScalaCompiler(resolvedScalaClasspath, resolvedZincClasspath);
-            return (Compiler<T>) new NormalizingScalaCompiler(new DaemonScalaCompiler<ScalaJavaJointCompileSpec>(projectDir, scalaCompiler, compilerDaemonManager, resolvedZincClasspath));
         }
         throw new IllegalArgumentException(String.format("Cannot create Compiler for unsupported CompileSpec type '%s'", spec.getSimpleName()));
     }
diff --git a/subprojects/scala/src/main/groovy/org/gradle/api/internal/tasks/scala/ScalaCompilerFactory.java b/subprojects/scala/src/main/groovy/org/gradle/api/internal/tasks/scala/ScalaCompilerFactory.java
index 5f0baa3..8ff9002 100644
--- a/subprojects/scala/src/main/groovy/org/gradle/api/internal/tasks/scala/ScalaCompilerFactory.java
+++ b/subprojects/scala/src/main/groovy/org/gradle/api/internal/tasks/scala/ScalaCompilerFactory.java
@@ -63,8 +63,6 @@ public class ScalaCompilerFactory implements CompilerFactory<ScalaJavaJointCompi
 
         Set<File> zincClasspathFiles = zincClasspath.getFiles();
 
-        // currently, we leave it to ZincScalaCompiler to also compile the Java code
-        Compiler<ScalaJavaJointCompileSpec> scalaCompiler = new DaemonScalaCompiler<ScalaJavaJointCompileSpec>(rootProjectDirectory, new ZincScalaCompiler(scalaClasspathFiles, zincClasspathFiles), compilerDaemonFactory, zincClasspathFiles);
-        return new NormalizingScalaCompiler(scalaCompiler);
+        throw new UnsupportedOperationException("The Zinc based Scala compiler is not supported in this version of Gradle");
     }
 }
-- 
2.5.0

