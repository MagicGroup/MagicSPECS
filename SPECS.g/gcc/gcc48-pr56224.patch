2013-02-09  Thomas Koenig  <tkoenig@gcc.gnu.org>

	PR fortran/56224
	* gfortran.h (gfc_add_include_path):  Add boolean argument for warn.
	* scanner.c (gfc_add_include_path):  Pass along warn argument
	to add_path_to_list.
	* options.c (gfc_post_options):  Add true warn argument to
	gfc_add_include_path.
	(gfc_handle_module_path_options):  Likewise.
	(gfc_handle_option): Also gfc_add_include_path for intrinsic
	modules, without warning.

--- gcc/fortran/gfortran.h	(Revision 195686)
+++ gcc/fortran/gfortran.h	(Arbeitskopie)
@@ -2378,7 +2378,7 @@ match gfc_match_char_spec (gfc_typespec *);
 void gfc_scanner_done_1 (void);
 void gfc_scanner_init_1 (void);
 
-void gfc_add_include_path (const char *, bool, bool);
+void gfc_add_include_path (const char *, bool, bool, bool);
 void gfc_add_intrinsic_modules_path (const char *);
 void gfc_release_include_path (void);
 FILE *gfc_open_included_file (const char *, bool, bool);
--- gcc/fortran/scanner.c	(Revision 195686)
+++ gcc/fortran/scanner.c	(Arbeitskopie)
@@ -375,9 +375,10 @@ add_path_to_list (gfc_directorylist **list, const
 
 
 void
-gfc_add_include_path (const char *path, bool use_for_modules, bool file_dir)
+gfc_add_include_path (const char *path, bool use_for_modules, bool file_dir,
+		      bool warn)
 {
-  add_path_to_list (&include_dirs, path, use_for_modules, file_dir, true);
+  add_path_to_list (&include_dirs, path, use_for_modules, file_dir, warn);
 
   /* For '#include "..."' these directories are automatically searched.  */
   if (!file_dir)
--- gcc/fortran/options.c	(Revision 195686)
+++ gcc/fortran/options.c	(Arbeitskopie)
@@ -337,10 +337,10 @@ gfc_post_options (const char **pfilename)
       source_path = (char *) alloca (i + 1);
       memcpy (source_path, canon_source_file, i);
       source_path[i] = 0;
-      gfc_add_include_path (source_path, true, true);
+      gfc_add_include_path (source_path, true, true, true);
     }
   else
-    gfc_add_include_path (".", true, true);
+    gfc_add_include_path (".", true, true, true);
 
   if (canon_source_file != gfc_source_file)
     free (CONST_CAST (char *, canon_source_file));
@@ -498,7 +498,7 @@ gfc_handle_module_path_options (const char *arg)
   gfc_option.module_dir = XCNEWVEC (char, strlen (arg) + 2);
   strcpy (gfc_option.module_dir, arg);
 
-  gfc_add_include_path (gfc_option.module_dir, true, false);
+  gfc_add_include_path (gfc_option.module_dir, true, false, true);
 
   strcat (gfc_option.module_dir, "/");
 }
@@ -844,6 +844,9 @@ gfc_handle_option (size_t scode, const char *arg,
 
     case OPT_fintrinsic_modules_path:
     case OPT_fintrinsic_modules_path_:
+
+      gfc_add_include_path (arg, false, false, false);
+
       gfc_add_intrinsic_modules_path (arg);
       break;
 
@@ -978,7 +983,7 @@ gfc_handle_option (size_t scode, const char *arg,
       break;
 
     case OPT_I:
-      gfc_add_include_path (arg, true, false);
+      gfc_add_include_path (arg, true, false, true);
       break;
 
     case OPT_J:
