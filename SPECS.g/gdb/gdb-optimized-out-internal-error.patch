http://sourceware.org/ml/gdb-patches/2011-09/msg00449.html
Subject: [patch] Fix internal error on optimized-out values (regression by me)

Hi,

since:
	Re: [patch] Code cleanup: Introduce allocate_optimized_out_value
	http://sourceware.org/ml/gdb-patches/2011-07/msg00327.html
	acfe85f56075910a3ba5e8b76189e0770079b8d1
can occur:
	(gdb) p p->f
	valops.c:1118: internal-error: Unexpected lazy value type.
	A problem internal to GDB has been detected,

in that mail referenced above:
# It is true it would be definitely a bug in a code incompatible with such
# change so one may rather fix that possible regression there.

so this testcase exploits such case.  The problem is formerly the code
allocated (in some cases) optimized out values as non-lazy ones.  Now they are
allocated all as lazy (*) which breaks some code not expecting lazy values.

(*) Such lazy optimized out value still gets silently allocate_value_contents
    by value_fetch_lazy, allocate_value_contents should be suppressed in such
    case; such more radical change has never been made.

Formerly (incl. gdb-7.3) did:
	(gdb) p p->f
	$1 = 0
which was also wrong, ((struct *) <optimized out>)->field should be IMO still
<optimized out>; just it became internal-error now.

GDB usually does require_not_optimized_out throwing error() when it meets any
first <optimized out> value.  I have just produced new optimized value
instead; require_not_optimized_out is not exported and I find it better this
way.

Following the rule that it is better if GDB does something wrong rather then
it throws internal-error to make the patch from July above fully safe one
would have to change allocate_optimized_out_value to allocate everything as
non-lazy.  I find that as a too ugly workaround of the codebase.

No regressions on {x86_64,x86_64-m32,i686}-fedora16pre-linux-gnu.


Andre, do you still see the bug even with this patch?


Thanks,
Jan


gdb/
2011-09-26  Jan Kratochvil  <jan.kratochvil@redhat.com>

	Fix internal error regression.
	* value.c (value_primitive_field): Handle value_optimized_out.  Move
	packed bitfields comment.

gdb/testsuite/
2011-09-26  Jan Kratochvil  <jan.kratochvil@redhat.com>

	Fix internal error regression.
	* gdb.dwarf2/implptr-optimized-out.S: New file.
	* gdb.dwarf2/implptr-optimized-out.exp: New file.

--- a/gdb/value.c
+++ b/gdb/value.c
@@ -2482,16 +2482,19 @@ value_primitive_field (struct value *arg1, int offset,
      description correctly.  */
   check_typedef (type);
 
-  /* Handle packed fields */
-
-  if (TYPE_FIELD_BITSIZE (arg_type, fieldno))
+  if (value_optimized_out (arg1))
+    v = allocate_optimized_out_value (type);
+  else if (TYPE_FIELD_BITSIZE (arg_type, fieldno))
     {
-      /* Create a new value for the bitfield, with bitpos and bitsize
+      /* Handle packed fields.
+
+	 Create a new value for the bitfield, with bitpos and bitsize
 	 set.  If possible, arrange offset and bitpos so that we can
 	 do a single aligned read of the size of the containing type.
 	 Otherwise, adjust offset to the byte containing the first
 	 bit.  Assume that the address, offset, and embedded offset
 	 are sufficiently aligned.  */
+
       int bitpos = TYPE_FIELD_BITPOS (arg_type, fieldno);
       int container_bitsize = TYPE_LENGTH (type) * 8;
 
--- /dev/null
+++ b/gdb/testsuite/gdb.dwarf2/implptr-optimized-out.S
@@ -0,0 +1,166 @@
+/* Copyright 2010, 2011 Free Software Foundation, Inc.
+
+   This program is free software; you can redistribute it and/or modify
+   it under the terms of the GNU General Public License as published by
+   the Free Software Foundation; either version 3 of the License, or
+   (at your option) any later version.
+
+   This program is distributed in the hope that it will be useful,
+   but WITHOUT ANY WARRANTY; without even the implied warranty of
+   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+   GNU General Public License for more details.
+
+   You should have received a copy of the GNU General Public License
+   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */
+
+	.section	.debug_info
+d:
+	.long	debug_end - 1f	/* Length of Compilation Unit Info */
+1:
+	.2byte	0x3	/* DWARF version number */
+	.long	.Ldebug_abbrev0	/* Offset Into Abbrev. Section */
+	.byte	0x4	/* Pointer Size (in bytes) */
+	.uleb128 0x1	/* (DIE (0xb) DW_TAG_compile_unit) */
+	.ascii "GNU C 4.4.3\0"	/* DW_AT_producer */
+	.byte	0x1	/* DW_AT_language */
+	.ascii "1.c\0"	/* DW_AT_name */
+
+.Ltype_int:
+	.uleb128 0x7	/* DW_TAG_base_type */
+	.byte	0x4	/* DW_AT_byte_size */
+	.byte	0x5	/* DW_AT_encoding */
+	.ascii "int\0"	/* DW_AT_name */
+
+.Ltype_struct:
+	.uleb128 0x2	/* DW_TAG_structure_type */
+	.ascii "s\0"	/* DW_AT_name */
+	.byte	4	/* DW_AT_byte_size */
+
+	.uleb128 0x3	/* DW_TAG_member */
+	.ascii "f\0"	/* DW_AT_name */
+	.4byte	.Ltype_int - d	/* DW_AT_type */
+	.byte	0	/* DW_AT_data_member_location */
+
+	.byte	0x0	/* end of children of DW_TAG_structure_type */
+
+	.uleb128	6			/* Abbrev: DW_TAG_subprogram */
+	.ascii		"main\0"		/* DW_AT_name */
+	.4byte		main			/* DW_AT_low_pc */
+	.4byte		main + 0x100		/* DW_AT_high_pc */
+	.4byte		.Ltype_int - d		/* DW_AT_type */
+	.byte		1			/* DW_AT_external */
+
+.Ltype_structptr:
+	.uleb128 0x5	/* DW_TAG_pointer_type */
+	.byte	0x4	/* DW_AT_byte_size */
+	.long	.Ltype_struct - d	/* DW_AT_type */
+
+.Lvar_out:
+	.uleb128 0x4	/* (DW_TAG_variable) */
+	.ascii "v\0"	/* DW_AT_name */
+	.byte	0	/* DW_AT_location: DW_FORM_block1 */
+	.4byte	.Ltype_struct - d	/* DW_AT_type */
+
+	.uleb128 0x4	/* (DW_TAG_variable) */
+	.ascii "p\0"	/* DW_AT_name */
+	.byte	2f - 1f	/* DW_AT_location: DW_FORM_block1 */
+1:
+	.byte	0xf2	/* DW_OP_GNU_implicit_pointer */
+	.4byte	.Lvar_out - d	/* referenced DIE */
+	.sleb128	0	/* offset */
+2:
+	.4byte	.Ltype_structptr - d	/* DW_AT_type */
+
+	.byte	0x0	/* end of children of main */
+
+	.byte	0x0	/* end of children of CU */
+debug_end:
+
+	.section	.debug_abbrev
+.Ldebug_abbrev0:
+
+	.uleb128 0x1	/* (abbrev code) */
+	.uleb128 0x11	/* (TAG: DW_TAG_compile_unit) */
+	.byte	0x1	/* DW_children_yes */
+	.uleb128 0x25	/* (DW_AT_producer) */
+	.uleb128 0x8	/* (DW_FORM_string) */
+	.uleb128 0x13	/* (DW_AT_language) */
+	.uleb128 0xb	/* (DW_FORM_data1) */
+	.uleb128 0x3	/* (DW_AT_name) */
+	.uleb128 0x8	/* (DW_FORM_string) */
+	.byte	0x0
+	.byte	0x0
+
+	.uleb128 0x2	/* (abbrev code) */
+	.uleb128 0x13	/* (TAG: DW_TAG_structure_type) */
+	.byte	0x1	/* DW_children_yes */
+	.uleb128 0x3	/* (DW_AT_name) */
+	.uleb128 0x8	/* (DW_FORM_string) */
+	.uleb128 0xb	/* (DW_AT_byte_size) */
+	.uleb128 0xb	/* (DW_FORM_data1) */
+	.byte	0
+	.byte	0
+
+	.uleb128 0x3	/* (abbrev code) */
+	.uleb128 0xd	/* (TAG: DW_TAG_member) */
+	.byte	0	/* DW_children_no */
+	.uleb128 0x3	/* (DW_AT_name) */
+	.uleb128 0x8	/* (DW_FORM_string) */
+	.uleb128 0x49	/* (DW_AT_type) */
+	.uleb128 0x13	/* (DW_FORM_ref4) */
+	.uleb128 0x38	/* (DW_AT_data_member_location) */
+	.uleb128 0xb	/* (DW_FORM_data1) */
+	.byte	0
+	.byte	0
+
+	.uleb128 0x4	/* (abbrev code) */
+	.uleb128 0x34	/* (TAG: DW_TAG_variable) */
+	.byte	0x0	/* DW_children_yes */
+	.uleb128 0x3	/* (DW_AT_name) */
+	.uleb128 0x8	/* (DW_FORM_string) */
+	.uleb128 0x02	/* (DW_AT_location) */
+	.uleb128 0xa	/* (DW_FORM_block1) */
+	.uleb128 0x49	/* (DW_AT_type) */
+	.uleb128 0x13	/* (DW_FORM_ref4) */
+	.byte	0x0
+	.byte	0x0
+
+	.uleb128 0x5	/* (abbrev code) */
+	.uleb128 0xf	/* (TAG: DW_TAG_pointer_type) */
+	.byte	0x0	/* DW_children_no */
+	.uleb128 0xb	/* (DW_AT_byte_size) */
+	.uleb128 0xb	/* (DW_FORM_data1) */
+	.uleb128 0x49	/* (DW_AT_type) */
+	.uleb128 0x13	/* (DW_FORM_ref4) */
+	.byte	0x0
+	.byte	0x0
+
+	.uleb128	6			/* Abbrev code */
+	.uleb128	0x2e			/* DW_TAG_subprogram */
+	.byte		1			/* has_children */
+	.uleb128	0x3			/* DW_AT_name */
+	.uleb128	0x8			/* DW_FORM_string */
+	.uleb128	0x11			/* DW_AT_low_pc */
+	.uleb128	0x1			/* DW_FORM_addr */
+	.uleb128	0x12			/* DW_AT_high_pc */
+	.uleb128	0x1			/* DW_FORM_addr */
+	.uleb128	0x49			/* DW_AT_type */
+	.uleb128	0x13			/* DW_FORM_ref4 */
+	.uleb128	0x3f			/* DW_AT_external */
+	.uleb128	0xc			/* DW_FORM_flag */
+	.byte		0x0			/* Terminator */
+	.byte		0x0			/* Terminator */
+
+	.uleb128 0x7	/* (abbrev code) */
+	.uleb128 0x24	/* (TAG: DW_TAG_base_type) */
+	.byte	0	/* DW_children_no */
+	.uleb128 0xb	/* (DW_AT_byte_size) */
+	.uleb128 0xb	/* (DW_FORM_data1) */
+	.uleb128 0x3e	/* (DW_AT_encoding) */
+	.uleb128 0xb	/* (DW_FORM_data1) */
+	.uleb128 0x3	/* (DW_AT_name) */
+	.uleb128 0x8	/* (DW_FORM_string) */
+	.byte	0
+	.byte	0
+
+	.byte	0x0
--- /dev/null
+++ b/gdb/testsuite/gdb.dwarf2/implptr-optimized-out.exp
@@ -0,0 +1,37 @@
+# Copyright 2011 Free Software Foundation, Inc.
+
+# This program is free software; you can redistribute it and/or modify
+# it under the terms of the GNU General Public License as published by
+# the Free Software Foundation; either version 3 of the License, or
+# (at your option) any later version.
+#
+# This program is distributed in the hope that it will be useful,
+# but WITHOUT ANY WARRANTY; without even the implied warranty of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+# GNU General Public License for more details.
+#
+# You should have received a copy of the GNU General Public License
+# along with this program.  If not, see <http://www.gnu.org/licenses/>.
+load_lib dwarf.exp
+
+# This test can only be run on targets which support DWARF-2 and use gas.
+if {![dwarf2_support]} {
+    return 0  
+}
+
+set testfile "implptr-optimized-out"
+set srcfile ${testfile}.S
+set mainfile main.c
+set executable ${testfile}
+set binfile ${objdir}/${subdir}/${executable}
+
+if [prepare_for_testing ${testfile}.exp $executable "${srcfile} ${mainfile}" {}] {
+    return -1
+}
+
+# DW_OP_GNU_implicit_pointer implementation requires a valid frame.
+if ![runto_main] {
+    return -1
+}
+
+gdb_test "p p->f" " = <optimized out>"

