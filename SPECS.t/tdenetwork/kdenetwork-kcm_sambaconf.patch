--- kdenetwork-3.4.0/filesharing/advanced/kcm_sambaconf/smbpasswdfile.cpp.orig	2005-05-25 15:04:16.000000000 -0400
+++ kdenetwork-3.4.0/filesharing/advanced/kcm_sambaconf/smbpasswdfile.cpp	2005-05-25 18:36:21.000000000 -0400
@@ -36,6 +36,9 @@
 #include <kpassdlg.h>
 #include <klocale.h>
 #include <kprocess.h>
+#include <ctype.h>
+//#include <kmessagebox.h>
+#include <tqcstring.h>
 
 #include "sambafile.h"
 #include "smbpasswdfile.h"
@@ -136,26 +139,10 @@
  **/
 bool SmbPasswdFile::addUser(const SambaUser & user,const TQString & password)
 {
-  KProcess p;
-  p << "smbpasswd" << "-a" << user.name;
-
-  p << password;
-
-  connect( &p, TQT_SIGNAL(receivedStdout(KProcess*,char*,int)),
-           this, TQT_SLOT(smbpasswdStdOutReceived(KProcess*,char*,int)));
-
-  _smbpasswdOutput = "";
-
-  bool result = p.start(KProcess::Block,KProcess::Stdout);
-
-  if (result)
-  {
-    kdDebug(5009) << _smbpasswdOutput << endl;
-  }
-
-  return result;
+    return passwdProc.exec(user.name, password);
 }
 
+
 /**
  * Tries to remove the passed user from the smbpasswd file
  * returns true if successful otherwise false
@@ -173,12 +160,6 @@
 }
 
 
-void SmbPasswdFile::smbpasswdStdOutReceived(KProcess *, char *buffer, int buflen)
-{
-  _smbpasswdOutput+=TQString::fromLatin1(buffer,buflen);
-}
-
-
 /**
  * Returns the Url of the smbpasswd file
  * specified in the [global] section of
@@ -226,4 +207,111 @@
 }
 
 
+PasswdProcess::PasswdProcess()
+{
+}
+
+
+PasswdProcess::~PasswdProcess()
+{
+}
+
+bool PasswdProcess::exec(const TQString &user, const TQString &passwd)
+{    
+    if (user.isEmpty())
+	return false;
+
+    // Try to set the default locale to make the parsing of the output 
+    // of `passwd' easier.
+    //setenv("LANG","C", true /* override */);
+
+    QCStringList args;
+    args += "-a";
+    args += TQCString(user.ascii());
+    int ret = PtyProcess::exec(QCString("smbpasswd"), args);
+    if (ret < 0)
+    {
+        //KMessageBox::error(0, "smbpasswd not found!");
+	kdDebug(1512) << k_lineinfo << "smbpasswd not found!\n";
+	return false;
+    }
+
+    ret = ConversePasswd(passwd);
+    if (ret < 0) {
+        kdDebug(1512) << k_lineinfo << "Conversation with smbpasswd failed. pid = " << pid() << endl;
+        //KMessageBox::error(0, "Conversation with smbpasswd failed!");
+    }
+        
+
+    if ((waitForChild() != 0))
+        return false;
+
+    return true;
+}
+
+
+/*
+ * The tricky thing is to make this work with a lot of different passwd
+ * implementations. We _don't_ want implementation specific routines.
+ * Return values: -1 = unknown error, 0 = ok, >0 = error code.
+ */
+
+int PasswdProcess::ConversePasswd(const TQString &passwd)
+{
+    TQString line;
+    //int state = 0;
+
+    line = readLine();
+    if (line.isNull()) {
+        return -1;
+    }
+    //KMessageBox::error(0, line);
+    if (isPrompt(line, "New")) {
+        WaitSlave();
+		write(m_Fd, passwd.ascii(), passwd.length());
+		write(m_Fd, "\n", 1);
+    }
+    line = readLine();
+    //KMessageBox::error(0, line);
+    if (line.isEmpty()) {
+        line = readLine();
+    }
+    if (line.isNull()) {
+        return -1;
+    }
+    if (isPrompt(line, "Retype")) {
+        WaitSlave();
+		write(m_Fd, passwd.ascii(), passwd.length());
+		write(m_Fd, "\n", 1);
+    }
+
+    kdDebug(1512) << k_lineinfo << "Conversation ended successfully.\n";
+    return 0;
+}
+    
+
+bool PasswdProcess::isPrompt(const TQString &line, const char *word)
+{
+    unsigned i, j, colon;
+    unsigned int lineLength(line.length());
+    for (i=0,j=0,colon=0; i<lineLength; i++) 
+    {
+	if (line[i] == ':') 
+	{
+	    j = i; colon++;
+	    continue;
+	}
+	if (!isspace(line[i]))
+	    j++;
+    }
+
+    if ((colon != 1) || (line[j] != ':'))
+	return false;
+    if (word == 0L)
+	return true;
+    return line.contains(word, false);
+}
+
+
+
 #include "smbpasswdfile.moc"
--- kdenetwork-3.4.0/filesharing/advanced/kcm_sambaconf/smbpasswdfile.h.orig	2005-05-25 15:26:26.000000000 -0400
+++ kdenetwork-3.4.0/filesharing/advanced/kcm_sambaconf/smbpasswdfile.h	2005-05-25 18:16:05.000000000 -0400
@@ -36,10 +36,34 @@
 
 #include <qstring.h>
 #include <kurl.h>
+#include <qcstring.h>
+#include <tdesu/process.h>
+#include "passwd.h"
 
 class SambaFile;
 class KProcess;
 
+class PasswdProcess
+    : public PtyProcess
+{
+public:
+    PasswdProcess();
+    ~PasswdProcess();
+
+    //enum Errors { PasswdNotFound=1, PasswordIncorrect, PasswordNotGood };
+
+    bool exec(const TQString &user, const TQString &passwd);
+
+    //QCString error() { return m_Error; }
+
+private:
+    bool isPrompt(const TQString &line, const char *word=0L);
+    int ConversePasswd(const TQString &passwd);
+
+    //QCString m_User, m_Error;
+    //bool bOtherUser;
+};
+
 /**
  * Simple class to store a Samba User
  **/
@@ -133,9 +157,8 @@
 protected:
   KURL _url;
   TQString _smbpasswdOutput;
+  PasswdProcess passwdProc;
 
-protected slots:
-  void smbpasswdStdOutReceived(KProcess*,char*,int);
 };
 
 #endif
--- kdenetwork-3.4.0/filesharing/advanced/kcm_sambaconf/usertabimpl.cpp.orig	2005-05-25 19:00:13.000000000 -0400
+++ kdenetwork-3.4.0/filesharing/advanced/kcm_sambaconf/usertabimpl.cpp	2005-05-25 19:00:39.000000000 -0400
@@ -264,9 +264,8 @@
     UserSelectDlg *dlg = new UserSelectDlg();
     dlg->init(_specifiedUsers,_share);
 
-    TQStringList selectedUsers = dlg->getSelectedUsers();
-
     if (dlg->exec()) {
+        TQStringList selectedUsers = dlg->getSelectedUsers();
         for (TQStringList::Iterator it = selectedUsers.begin(); it != selectedUsers.end(); ++it)
         {
             addUserToUserTable(*it,dlg->getAccess());
