#!/bin/sh
#
# miredo Teredo IPv6 tunneling client
#
# chkconfig:   - 12 88
# description: miredo is a daemon program providing a Teredo tunnel \
#              client compatible with the "Teredo: Tunneling IPv6 over \
#              UDP through NATs" Internet proposed standard (RFC \
#              4380).  This service implements a Teredo client that \
#              allows the local IPv6-enabled host which is located \
#              behind an IPv4-only Network Address Translator \
#              (a.k.a. NAT) to encapsulate its IPv6 traffic inside UDP \
#              over IPv4 packets.

### BEGIN INIT INFO
# Provides: miredo teredo-client
# Required-Start: $network
# Required-Stop: $network
# Default-Start: 
# Default-Stop: 0 1 6
# Short-Description: Teredo IPv6 tunneling client
# Description: miredo is a daemon program providing a Teredo tunnel
#              client compatible with the "Teredo: Tunneling IPv6 over
#              UDP through NATs" Internet proposed standard (RFC
#              4380).  This service implements a Teredo client that
#              allows the local IPv6-enabled host which is located
#              behind an IPv4-only Network Address Translator
#              (a.k.a. NAT) to encapsulate its IPv6 traffic inside UDP
#              over IPv4 packets.
### END INIT INFO

# Source function library.
. /etc/rc.d/init.d/functions

exec="/usr/sbin/miredo"
prog="miredo"
config="/etc/miredo/miredo.conf"

[ -e /etc/sysconfig/$prog ] && . /etc/sysconfig/$prog

lockfile=/var/lock/subsys/$prog

start() {
    [ -x $exec ] || exit 5
    [ -f $config ] || exit 6
    echo -n $"Starting $prog: "
    # if not running, start it up here, usually something like "daemon $exec"
    daemon $exec
    retval=$?
    echo
    [ $retval -eq 0 ] && touch $lockfile
    return $retval
}

stop() {
    echo -n $"Stopping $prog: "
    # stop it here, often "killproc $prog"
    killproc $prog
    retval=$?
    echo
    [ $retval -eq 0 ] && rm -f $lockfile
    return $retval
}

restart() {
    stop
    start
}

reload() {
    restart
}

force_reload() {
    restart
}

rh_status() {
    # run checks to determine if the service is running or use generic status
    status $prog
}

rh_status_q() {
    rh_status >/dev/null 2>&1
}


case "$1" in
    start)
        rh_status_q && exit 0
        $1
        ;;
    stop)
        rh_status_q || exit 0
        $1
        ;;
    restart)
        $1
        ;;
    reload)
        rh_status_q || exit 7
        $1
        ;;
    force-reload)
        force_reload
        ;;
    status)
        rh_status
        ;;
    condrestart|try-restart)
        rh_status_q || exit 0
        restart
        ;;
    *)
        echo $"Usage: $0 {start|stop|status|restart|condrestart|try-restart|reload|force-reload}"
        exit 2
esac
exit $?
